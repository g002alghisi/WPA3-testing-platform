[16:48:18.460] Beginning saving session of stdout and stderr Test/Tmp/Log/Cypress_board/e_rogue_wpa2...
[0;32mSuccess.[0m

[16:48:18.462] Fetching configuration directory associated to e_wpa2...
[0;32mSuccess.[0m

[16:48:18.482] Looking for Freeradius/Conf/E_wpa2/...
[0;32mSuccess.[0m

[0;36mRunning FreeRADIUS. Press Ctrl-C to stop.[0m

FreeRADIUS Version 3.0.26
Copyright (C) 1999-2021 The FreeRADIUS server project and contributors
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE
You may redistribute copies of FreeRADIUS under the terms of the
GNU General Public License
For more information about these matters, see the file named COPYRIGHT
Starting - reading configuration files ...
including dictionary file /usr/share/freeradius/dictionary
including dictionary file /usr/share/freeradius/dictionary.dhcp
including dictionary file /usr/share/freeradius/dictionary.vqp
including dictionary file Freeradius/Conf/E_wpa2//dictionary
including configuration file Freeradius/Conf/E_wpa2//radiusd.conf
including configuration file Freeradius/Conf/E_wpa2//proxy.conf
including configuration file Freeradius/Conf/E_wpa2//clients.conf
including files in directory Freeradius/Conf/E_wpa2//mods-enabled/
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/files
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/passwd
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/expr
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/soh
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/digest
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/dynamic_clients
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/unix
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/echo
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/preprocess
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/replicate
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/pap
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/always
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/detail
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/cache_eap
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/mschap
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/eap
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/logintime
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/utf8
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/unpack
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/radutmp
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/expiration
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/chap
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/realm
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/sradutmp
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/attr_filter
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/ntlm_auth
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/detail.log
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/exec
including configuration file Freeradius/Conf/E_wpa2//mods-enabled/linelog
including files in directory Freeradius/Conf/E_wpa2//policy.d/
including configuration file Freeradius/Conf/E_wpa2//policy.d/operator-name
including configuration file Freeradius/Conf/E_wpa2//policy.d/dhcp
including configuration file Freeradius/Conf/E_wpa2//policy.d/rfc7542
including configuration file Freeradius/Conf/E_wpa2//policy.d/accounting
including configuration file Freeradius/Conf/E_wpa2//policy.d/filter
including configuration file Freeradius/Conf/E_wpa2//policy.d/cui
including configuration file Freeradius/Conf/E_wpa2//policy.d/moonshot-targeted-ids
including configuration file Freeradius/Conf/E_wpa2//policy.d/canonicalization
including configuration file Freeradius/Conf/E_wpa2//policy.d/eap
including configuration file Freeradius/Conf/E_wpa2//policy.d/control
including configuration file Freeradius/Conf/E_wpa2//policy.d/abfab-tr
including configuration file Freeradius/Conf/E_wpa2//policy.d/debug
including files in directory Freeradius/Conf/E_wpa2//sites-enabled/
including configuration file Freeradius/Conf/E_wpa2//sites-enabled/inner-tunnel
including configuration file Freeradius/Conf/E_wpa2//sites-enabled/default
main {
 security {
 	user = "freerad"
 	group = "freerad"
 	allow_core_dumps = no
 }
	name = "freeradius"
	prefix = "/usr"
	localstatedir = "/var"
	logdir = "/var/log/freeradius"
	run_dir = "/var/run/freeradius"
}
main {
	name = "freeradius"
	prefix = "/usr"
	localstatedir = "/var"
	sbindir = "/usr/sbin"
	logdir = "/var/log/freeradius"
	run_dir = "/var/run/freeradius"
	libdir = "/usr/lib/freeradius"
	radacctdir = "/var/log/freeradius/radacct"
	hostname_lookups = no
	max_request_time = 30
	cleanup_delay = 5
	max_requests = 16384
	postauth_client_lost = no
	pidfile = "/var/run/freeradius/freeradius.pid"
	checkrad = "/usr/sbin/checkrad"
	debug_level = 0
	proxy_requests = yes
 log {
 	stripped_names = no
 	auth = no
 	auth_badpass = no
 	auth_goodpass = no
 	colourise = yes
 	msg_denied = "You are already logged in - access denied"
 }
 resources {
 }
 security {
 	max_attributes = 200
 	reject_delay = 1.000000
 	status_server = yes
 }
}
radiusd: #### Loading Realms and Home Servers ####
 proxy server {
 	retry_delay = 5
 	retry_count = 3
 	default_fallback = no
 	dead_time = 120
 	wake_all_if_all_dead = no
 }
 home_server localhost {
 	ipaddr = 127.0.0.1
 	port = 1812
 	type = "auth"
 	secret = <<< secret >>>
 	response_window = 20.000000
 	response_timeouts = 1
 	max_outstanding = 65536
 	zombie_period = 40
 	status_check = "status-server"
 	ping_interval = 30
 	check_interval = 30
 	check_timeout = 4
 	num_answers_to_alive = 3
 	revive_interval = 120
  limit {
  	max_connections = 16
  	max_requests = 0
  	lifetime = 0
  	idle_timeout = 0
  }
  coa {
  	irt = 2
  	mrt = 16
  	mrc = 5
  	mrd = 30
  }
 }
 home_server_pool my_auth_failover {
	type = fail-over
	home_server = localhost
 }
 realm example.com {
	auth_pool = my_auth_failover
 }
 realm LOCAL {
 }
radiusd: #### Loading Clients ####
 client localhost {
 	ipaddr = 127.0.0.1
 	require_message_authenticator = no
 	secret = <<< secret >>>
 	nas_type = "other"
 	proto = "*"
  limit {
  	max_connections = 16
  	lifetime = 0
  	idle_timeout = 30
  }
 }
 client localhost_ipv6 {
 	ipv6addr = ::1
 	require_message_authenticator = no
 	secret = <<< secret >>>
  limit {
  	max_connections = 16
  	lifetime = 0
  	idle_timeout = 30
  }
 }
Debugger not attached
systemd watchdog is disabled
 # Creating Auth-Type = mschap
 # Creating Auth-Type = eap
 # Creating Auth-Type = PAP
 # Creating Auth-Type = CHAP
 # Creating Auth-Type = MS-CHAP
 # Creating Auth-Type = digest
 # Creating Autz-Type = New-TLS-Connection
radiusd: #### Instantiating modules ####
 modules {
  # Loaded module rlm_files
  # Loading module "files" from file Freeradius/Conf/E_wpa2//mods-enabled/files
  files {
  	filename = "Freeradius/Conf/E_wpa2//mods-config/files/authorize"
  	acctusersfile = "Freeradius/Conf/E_wpa2//mods-config/files/accounting"
  	preproxy_usersfile = "Freeradius/Conf/E_wpa2//mods-config/files/pre-proxy"
  }
  # Loaded module rlm_passwd
  # Loading module "etc_passwd" from file Freeradius/Conf/E_wpa2//mods-enabled/passwd
  passwd etc_passwd {
  	filename = "/etc/passwd"
  	format = "*User-Name:Crypt-Password:"
  	delimiter = ":"
  	ignore_nislike = no
  	ignore_empty = yes
  	allow_multiple_keys = no
  	hash_size = 100
  }
  # Loaded module rlm_expr
  # Loading module "expr" from file Freeradius/Conf/E_wpa2//mods-enabled/expr
  expr {
  	safe_characters = "@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_: /√§√©√∂√º√†√¢√¶√ß√®√©√™√´√Æ√Ø√¥≈ì√π√ª√ºa√ø√Ñ√â√ñ√ú√ü√Ä√Ç√Ü√á√à√â√ä√ã√é√è√î≈í√ô√õ√ú≈∏"
  }
  # Loaded module rlm_soh
  # Loading module "soh" from file Freeradius/Conf/E_wpa2//mods-enabled/soh
  soh {
  	dhcp = yes
  }
  # Loaded module rlm_digest
  # Loading module "digest" from file Freeradius/Conf/E_wpa2//mods-enabled/digest
  # Loaded module rlm_dynamic_clients
  # Loading module "dynamic_clients" from file Freeradius/Conf/E_wpa2//mods-enabled/dynamic_clients
  # Loaded module rlm_unix
  # Loading module "unix" from file Freeradius/Conf/E_wpa2//mods-enabled/unix
  unix {
  	radwtmp = "/var/log/freeradius/radwtmp"
  }
Creating attribute Unix-Group
  # Loaded module rlm_exec
  # Loading module "echo" from file Freeradius/Conf/E_wpa2//mods-enabled/echo
  exec echo {
  	wait = yes
  	program = "/bin/echo %{User-Name}"
  	input_pairs = "request"
  	output_pairs = "reply"
  	shell_escape = yes
  }
  # Loaded module rlm_preprocess
  # Loading module "preprocess" from file Freeradius/Conf/E_wpa2//mods-enabled/preprocess
  preprocess {
  	huntgroups = "Freeradius/Conf/E_wpa2//mods-config/preprocess/huntgroups"
  	hints = "Freeradius/Conf/E_wpa2//mods-config/preprocess/hints"
  	with_ascend_hack = no
  	ascend_channels_per_line = 23
  	with_ntdomain_hack = no
  	with_specialix_jetstream_hack = no
  	with_cisco_vsa_hack = no
  	with_alvarion_vsa_hack = no
  }
  # Loaded module rlm_replicate
  # Loading module "replicate" from file Freeradius/Conf/E_wpa2//mods-enabled/replicate
  # Loaded module rlm_pap
  # Loading module "pap" from file Freeradius/Conf/E_wpa2//mods-enabled/pap
  pap {
  	normalise = yes
  }
  # Loaded module rlm_always
  # Loading module "reject" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  always reject {
  	rcode = "reject"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "fail" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  always fail {
  	rcode = "fail"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "ok" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  always ok {
  	rcode = "ok"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "handled" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  always handled {
  	rcode = "handled"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "invalid" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  always invalid {
  	rcode = "invalid"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "userlock" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  always userlock {
  	rcode = "userlock"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "notfound" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  always notfound {
  	rcode = "notfound"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "noop" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  always noop {
  	rcode = "noop"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "updated" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  always updated {
  	rcode = "updated"
  	simulcount = 0
  	mpp = no
  }
  # Loaded module rlm_detail
  # Loading module "detail" from file Freeradius/Conf/E_wpa2//mods-enabled/detail
  detail {
  	filename = "/var/log/freeradius/radacct/%{%{Packet-Src-IP-Address}:-%{Packet-Src-IPv6-Address}}/detail-%Y%m%d"
  	header = "%t"
  	permissions = 384
  	locking = no
  	escape_filenames = no
  	log_packet_header = no
  }
  # Loaded module rlm_cache
  # Loading module "cache_eap" from file Freeradius/Conf/E_wpa2//mods-enabled/cache_eap
  cache cache_eap {
  	driver = "rlm_cache_rbtree"
  	key = "%{%{control:State}:-%{%{reply:State}:-%{State}}}"
  	ttl = 15
  	max_entries = 0
  	epoch = 0
  	add_stats = no
  }
  # Loaded module rlm_mschap
  # Loading module "mschap" from file Freeradius/Conf/E_wpa2//mods-enabled/mschap
  mschap {
  	use_mppe = yes
  	require_encryption = no
  	require_strong = no
  	with_ntdomain_hack = yes
   passchange {
   }
  	allow_retry = yes
  	winbind_retry_with_normalised_username = no
  }
  # Loaded module rlm_eap
  # Loading module "eap" from file Freeradius/Conf/E_wpa2//mods-enabled/eap
  eap {
  	default_eap_type = "md5"
  	timer_expire = 60
  	ignore_unknown_eap_types = no
  	cisco_accounting_username_bug = no
  	max_sessions = 16384
  }
  # Loaded module rlm_logintime
  # Loading module "logintime" from file Freeradius/Conf/E_wpa2//mods-enabled/logintime
  logintime {
  	minimum_timeout = 60
  }
  # Loaded module rlm_utf8
  # Loading module "utf8" from file Freeradius/Conf/E_wpa2//mods-enabled/utf8
  # Loaded module rlm_unpack
  # Loading module "unpack" from file Freeradius/Conf/E_wpa2//mods-enabled/unpack
  # Loaded module rlm_radutmp
  # Loading module "radutmp" from file Freeradius/Conf/E_wpa2//mods-enabled/radutmp
  radutmp {
  	filename = "/var/log/freeradius/radutmp"
  	username = "%{User-Name}"
  	case_sensitive = yes
  	check_with_nas = yes
  	permissions = 384
  	caller_id = yes
  }
  # Loaded module rlm_expiration
  # Loading module "expiration" from file Freeradius/Conf/E_wpa2//mods-enabled/expiration
  # Loaded module rlm_chap
  # Loading module "chap" from file Freeradius/Conf/E_wpa2//mods-enabled/chap
  # Loaded module rlm_realm
  # Loading module "IPASS" from file Freeradius/Conf/E_wpa2//mods-enabled/realm
  realm IPASS {
  	format = "prefix"
  	delimiter = "/"
  	ignore_default = no
  	ignore_null = no
  }
  # Loading module "suffix" from file Freeradius/Conf/E_wpa2//mods-enabled/realm
  realm suffix {
  	format = "suffix"
  	delimiter = "@"
  	ignore_default = no
  	ignore_null = no
  }
  # Loading module "bangpath" from file Freeradius/Conf/E_wpa2//mods-enabled/realm
  realm bangpath {
  	format = "prefix"
  	delimiter = "!"
  	ignore_default = no
  	ignore_null = no
  }
  # Loading module "realmpercent" from file Freeradius/Conf/E_wpa2//mods-enabled/realm
  realm realmpercent {
  	format = "suffix"
  	delimiter = "%"
  	ignore_default = no
  	ignore_null = no
  }
  # Loading module "ntdomain" from file Freeradius/Conf/E_wpa2//mods-enabled/realm
  realm ntdomain {
  	format = "prefix"
  	delimiter = "\\"
  	ignore_default = no
  	ignore_null = no
  }
  # Loading module "sradutmp" from file Freeradius/Conf/E_wpa2//mods-enabled/sradutmp
  radutmp sradutmp {
  	filename = "/var/log/freeradius/sradutmp"
  	username = "%{User-Name}"
  	case_sensitive = yes
  	check_with_nas = yes
  	permissions = 420
  	caller_id = no
  }
  # Loaded module rlm_attr_filter
  # Loading module "attr_filter.post-proxy" from file Freeradius/Conf/E_wpa2//mods-enabled/attr_filter
  attr_filter attr_filter.post-proxy {
  	filename = "Freeradius/Conf/E_wpa2//mods-config/attr_filter/post-proxy"
  	key = "%{Realm}"
  	relaxed = no
  }
  # Loading module "attr_filter.pre-proxy" from file Freeradius/Conf/E_wpa2//mods-enabled/attr_filter
  attr_filter attr_filter.pre-proxy {
  	filename = "Freeradius/Conf/E_wpa2//mods-config/attr_filter/pre-proxy"
  	key = "%{Realm}"
  	relaxed = no
  }
  # Loading module "attr_filter.access_reject" from file Freeradius/Conf/E_wpa2//mods-enabled/attr_filter
  attr_filter attr_filter.access_reject {
  	filename = "Freeradius/Conf/E_wpa2//mods-config/attr_filter/access_reject"
  	key = "%{User-Name}"
  	relaxed = no
  }
  # Loading module "attr_filter.access_challenge" from file Freeradius/Conf/E_wpa2//mods-enabled/attr_filter
  attr_filter attr_filter.access_challenge {
  	filename = "Freeradius/Conf/E_wpa2//mods-config/attr_filter/access_challenge"
  	key = "%{User-Name}"
  	relaxed = no
  }
  # Loading module "attr_filter.accounting_response" from file Freeradius/Conf/E_wpa2//mods-enabled/attr_filter
  attr_filter attr_filter.accounting_response {
  	filename = "Freeradius/Conf/E_wpa2//mods-config/attr_filter/accounting_response"
  	key = "%{User-Name}"
  	relaxed = no
  }
  # Loading module "attr_filter.coa" from file Freeradius/Conf/E_wpa2//mods-enabled/attr_filter
  attr_filter attr_filter.coa {
  	filename = "Freeradius/Conf/E_wpa2//mods-config/attr_filter/coa"
  	key = "%{User-Name}"
  	relaxed = no
  }
  # Loading module "ntlm_auth" from file Freeradius/Conf/E_wpa2//mods-enabled/ntlm_auth
  exec ntlm_auth {
  	wait = yes
  	program = "/path/to/ntlm_auth --request-nt-key --domain=MYDOMAIN --username=%{mschap:User-Name} --password=%{User-Password}"
  	shell_escape = yes
  }
  # Loading module "auth_log" from file Freeradius/Conf/E_wpa2//mods-enabled/detail.log
  detail auth_log {
  	filename = "/var/log/freeradius/radacct/%{%{Packet-Src-IP-Address}:-%{Packet-Src-IPv6-Address}}/auth-detail-%Y%m%d"
  	header = "%t"
  	permissions = 384
  	locking = no
  	escape_filenames = no
  	log_packet_header = no
  }
  # Loading module "reply_log" from file Freeradius/Conf/E_wpa2//mods-enabled/detail.log
  detail reply_log {
  	filename = "/var/log/freeradius/radacct/%{%{Packet-Src-IP-Address}:-%{Packet-Src-IPv6-Address}}/reply-detail-%Y%m%d"
  	header = "%t"
  	permissions = 384
  	locking = no
  	escape_filenames = no
  	log_packet_header = no
  }
  # Loading module "pre_proxy_log" from file Freeradius/Conf/E_wpa2//mods-enabled/detail.log
  detail pre_proxy_log {
  	filename = "/var/log/freeradius/radacct/%{%{Packet-Src-IP-Address}:-%{Packet-Src-IPv6-Address}}/pre-proxy-detail-%Y%m%d"
  	header = "%t"
  	permissions = 384
  	locking = no
  	escape_filenames = no
  	log_packet_header = no
  }
  # Loading module "post_proxy_log" from file Freeradius/Conf/E_wpa2//mods-enabled/detail.log
  detail post_proxy_log {
  	filename = "/var/log/freeradius/radacct/%{%{Packet-Src-IP-Address}:-%{Packet-Src-IPv6-Address}}/post-proxy-detail-%Y%m%d"
  	header = "%t"
  	permissions = 384
  	locking = no
  	escape_filenames = no
  	log_packet_header = no
  }
  # Loading module "exec" from file Freeradius/Conf/E_wpa2//mods-enabled/exec
  exec {
  	wait = no
  	input_pairs = "request"
  	shell_escape = yes
  	timeout = 10
  }
  # Loaded module rlm_linelog
  # Loading module "linelog" from file Freeradius/Conf/E_wpa2//mods-enabled/linelog
  linelog {
  	filename = "/var/log/freeradius/linelog"
  	escape_filenames = no
  	syslog_severity = "info"
  	permissions = 384
  	format = "This is a log message for %{User-Name}"
  	reference = "messages.%{%{reply:Packet-Type}:-default}"
  }
  # Loading module "log_accounting" from file Freeradius/Conf/E_wpa2//mods-enabled/linelog
  linelog log_accounting {
  	filename = "/var/log/freeradius/linelog-accounting"
  	escape_filenames = no
  	syslog_severity = "info"
  	permissions = 384
  	format = ""
  	reference = "Accounting-Request.%{%{Acct-Status-Type}:-unknown}"
  }
  instantiate {
  }
  # Instantiating module "files" from file Freeradius/Conf/E_wpa2//mods-enabled/files
reading pairlist file Freeradius/Conf/E_wpa2//mods-config/files/authorize
reading pairlist file Freeradius/Conf/E_wpa2//mods-config/files/accounting
reading pairlist file Freeradius/Conf/E_wpa2//mods-config/files/pre-proxy
  # Instantiating module "etc_passwd" from file Freeradius/Conf/E_wpa2//mods-enabled/passwd
rlm_passwd: nfields: 3 keyfield 0(User-Name) listable: no
  # Instantiating module "preprocess" from file Freeradius/Conf/E_wpa2//mods-enabled/preprocess
reading pairlist file Freeradius/Conf/E_wpa2//mods-config/preprocess/huntgroups
reading pairlist file Freeradius/Conf/E_wpa2//mods-config/preprocess/hints
  # Instantiating module "pap" from file Freeradius/Conf/E_wpa2//mods-enabled/pap
  # Instantiating module "reject" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  # Instantiating module "fail" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  # Instantiating module "ok" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  # Instantiating module "handled" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  # Instantiating module "invalid" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  # Instantiating module "userlock" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  # Instantiating module "notfound" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  # Instantiating module "noop" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  # Instantiating module "updated" from file Freeradius/Conf/E_wpa2//mods-enabled/always
  # Instantiating module "detail" from file Freeradius/Conf/E_wpa2//mods-enabled/detail
  # Instantiating module "cache_eap" from file Freeradius/Conf/E_wpa2//mods-enabled/cache_eap
rlm_cache (cache_eap): Driver rlm_cache_rbtree (module rlm_cache_rbtree) loaded and linked
  # Instantiating module "mschap" from file Freeradius/Conf/E_wpa2//mods-enabled/mschap
rlm_mschap (mschap): using internal authentication
  # Instantiating module "eap" from file Freeradius/Conf/E_wpa2//mods-enabled/eap
   # Linked to sub-module rlm_eap_md5
   # Linked to sub-module rlm_eap_gtc
   gtc {
   	challenge = "Password: "
   	auth_type = "PAP"
   }
   # Linked to sub-module rlm_eap_tls
   tls {
   	tls = "tls-common"
   }
   tls-config tls-common {
   	verify_depth = 0
   	ca_path = "Freeradius/Conf/E_wpa2//certs"
   	pem_file_type = yes
   	private_key_file = "Freeradius/Conf/E_wpa2//certs/server.key"
   	certificate_file = "Freeradius/Conf/E_wpa2//certs/server.crt"
   	ca_file = "Freeradius/Conf/E_wpa2//certs/ca.pem"
   	private_key_password = <<< secret >>>
   	fragment_size = 1024
   	include_length = yes
   	auto_chain = yes
   	check_crl = no
   	check_all_crl = no
   	ca_path_reload_interval = 0
   	cipher_list = "DEFAULT"
   	cipher_server_preference = no
   	reject_unknown_intermediate_ca = no
   	ecdh_curve = ""
   	tls_max_version = "1.2"
   	tls_min_version = "1.2"
    cache {
    	enable = no
    	lifetime = 24
    	max_entries = 255
    }
    verify {
    	skip_if_ocsp_ok = no
    }
    ocsp {
    	enable = no
    	override_cert_url = yes
    	url = "http://127.0.0.1/ocsp/"
    	use_nonce = yes
    	timeout = 0
    	softfail = no
    }
   }
   # Linked to sub-module rlm_eap_ttls
   ttls {
   	tls = "tls-common"
   	default_eap_type = "md5"
   	copy_request_to_tunnel = no
   	use_tunneled_reply = no
   	virtual_server = "inner-tunnel"
   	include_length = yes
   	require_client_cert = no
   }
tls: Using cached TLS configuration from previous invocation
   # Linked to sub-module rlm_eap_peap
   peap {
   	tls = "tls-common"
   	default_eap_type = "mschapv2"
   	copy_request_to_tunnel = no
   	use_tunneled_reply = no
   	proxy_tunneled_request_as_eap = yes
   	virtual_server = "inner-tunnel"
   	soh = no
   	require_client_cert = no
   }
tls: Using cached TLS configuration from previous invocation
   # Linked to sub-module rlm_eap_mschapv2
   mschapv2 {
   	with_ntdomain_hack = no
   	send_error = no
   }
  # Instantiating module "logintime" from file Freeradius/Conf/E_wpa2//mods-enabled/logintime
  # Instantiating module "expiration" from file Freeradius/Conf/E_wpa2//mods-enabled/expiration
  # Instantiating module "IPASS" from file Freeradius/Conf/E_wpa2//mods-enabled/realm
  # Instantiating module "suffix" from file Freeradius/Conf/E_wpa2//mods-enabled/realm
  # Instantiating module "bangpath" from file Freeradius/Conf/E_wpa2//mods-enabled/realm
  # Instantiating module "realmpercent" from file Freeradius/Conf/E_wpa2//mods-enabled/realm
  # Instantiating module "ntdomain" from file Freeradius/Conf/E_wpa2//mods-enabled/realm
  # Instantiating module "attr_filter.post-proxy" from file Freeradius/Conf/E_wpa2//mods-enabled/attr_filter
reading pairlist file Freeradius/Conf/E_wpa2//mods-config/attr_filter/post-proxy
  # Instantiating module "attr_filter.pre-proxy" from file Freeradius/Conf/E_wpa2//mods-enabled/attr_filter
reading pairlist file Freeradius/Conf/E_wpa2//mods-config/attr_filter/pre-proxy
  # Instantiating module "attr_filter.access_reject" from file Freeradius/Conf/E_wpa2//mods-enabled/attr_filter
reading pairlist file Freeradius/Conf/E_wpa2//mods-config/attr_filter/access_reject
  # Instantiating module "attr_filter.access_challenge" from file Freeradius/Conf/E_wpa2//mods-enabled/attr_filter
reading pairlist file Freeradius/Conf/E_wpa2//mods-config/attr_filter/access_challenge
  # Instantiating module "attr_filter.accounting_response" from file Freeradius/Conf/E_wpa2//mods-enabled/attr_filter
reading pairlist file Freeradius/Conf/E_wpa2//mods-config/attr_filter/accounting_response
  # Instantiating module "attr_filter.coa" from file Freeradius/Conf/E_wpa2//mods-enabled/attr_filter
reading pairlist file Freeradius/Conf/E_wpa2//mods-config/attr_filter/coa
  # Instantiating module "auth_log" from file Freeradius/Conf/E_wpa2//mods-enabled/detail.log
rlm_detail (auth_log): 'User-Password' suppressed, will not appear in detail output
  # Instantiating module "reply_log" from file Freeradius/Conf/E_wpa2//mods-enabled/detail.log
  # Instantiating module "pre_proxy_log" from file Freeradius/Conf/E_wpa2//mods-enabled/detail.log
  # Instantiating module "post_proxy_log" from file Freeradius/Conf/E_wpa2//mods-enabled/detail.log
  # Instantiating module "linelog" from file Freeradius/Conf/E_wpa2//mods-enabled/linelog
  # Instantiating module "log_accounting" from file Freeradius/Conf/E_wpa2//mods-enabled/linelog
 } # modules
radiusd: #### Loading Virtual Servers ####
server { # from file Freeradius/Conf/E_wpa2//radiusd.conf
} # server
server inner-tunnel { # from file Freeradius/Conf/E_wpa2//sites-enabled/inner-tunnel
 # Loading authenticate {...}
Compiling Auth-Type PAP for attr Auth-Type
Compiling Auth-Type CHAP for attr Auth-Type
Compiling Auth-Type MS-CHAP for attr Auth-Type
 # Loading authorize {...}
Ignoring "sql" (see raddb/mods-available/README.rst)
Ignoring "ldap" (see raddb/mods-available/README.rst)
 # Loading session {...}
 # Loading post-proxy {...}
 # Loading post-auth {...}
 # Skipping contents of 'if' as it is always 'false' -- Freeradius/Conf/E_wpa2//sites-enabled/inner-tunnel:336
Compiling Post-Auth-Type REJECT for attr Post-Auth-Type
} # server inner-tunnel
server default { # from file Freeradius/Conf/E_wpa2//sites-enabled/default
 # Loading authenticate {...}
Compiling Auth-Type PAP for attr Auth-Type
Compiling Auth-Type CHAP for attr Auth-Type
Compiling Auth-Type MS-CHAP for attr Auth-Type
 # Loading authorize {...}
Compiling Autz-Type New-TLS-Connection for attr Autz-Type
 # Loading preacct {...}
 # Loading accounting {...}
 # Loading post-proxy {...}
 # Loading post-auth {...}
Compiling Post-Auth-Type REJECT for attr Post-Auth-Type
Compiling Post-Auth-Type Challenge for attr Post-Auth-Type
Compiling Post-Auth-Type Client-Lost for attr Post-Auth-Type
} # server default
radiusd: #### Opening IP addresses and Ports ####
listen {
  	type = "auth"
  	ipaddr = 127.0.0.1
  	port = 18120
}
listen {
  	type = "auth"
  	ipaddr = *
  	port = 0
   limit {
   	max_connections = 16
   	lifetime = 0
   	idle_timeout = 30
   }
}
listen {
  	type = "acct"
  	ipaddr = *
  	port = 0
   limit {
   	max_connections = 16
   	lifetime = 0
   	idle_timeout = 30
   }
}
listen {
  	type = "auth"
  	ipv6addr = ::
  	port = 0
   limit {
   	max_connections = 16
   	lifetime = 0
   	idle_timeout = 30
   }
}
listen {
  	type = "acct"
  	ipv6addr = ::
  	port = 0
   limit {
   	max_connections = 16
   	lifetime = 0
   	idle_timeout = 30
   }
}
Listening on auth address 127.0.0.1 port 18120 bound to server inner-tunnel
Listening on auth address * port 1812 bound to server default
Listening on acct address * port 1813 bound to server default
Listening on auth address :: port 1812 bound to server default
Listening on acct address :: port 1813 bound to server default
Listening on proxy address * port 38876
Listening on proxy address :: port 58048
Ready to process requests
(0) Received Access-Request Id 0 from 127.0.0.1:36150 to 127.0.0.1:1812 length 222
(0)   User-Name = "wiced"
(0)   NAS-IP-Address = 127.0.0.1
(0)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(0)   NAS-Port-Type = Wireless-802.11
(0)   Service-Type = Framed-User
(0)   NAS-Port = 1
(0)   Calling-Station-Id = "D4-53-83-BE-23-62"
(0)   Connect-Info = "CONNECT 54Mbps 802.11g"
(0)   Acct-Session-Id = "3E3D94C523705EF6"
(0)   Acct-Multi-Session-Id = "6AA29C8D2F2A27C8"
(0)   WLAN-Pairwise-Cipher = 1027076
(0)   WLAN-Group-Cipher = 1027076
(0)   WLAN-AKM-Suite = 1027073
(0)   WLAN-Group-Mgmt-Cipher = 1027078
(0)   Framed-MTU = 1400
(0)   EAP-Message = 0x020f000a017769636564
(0)   Message-Authenticator = 0xe366aa24f8249ef05f8da89d6946fd92
(0) # Executing section authorize from file Freeradius/Conf/E_wpa2//sites-enabled/default
(0)   authorize {
(0)     policy filter_username {
(0)       if (&User-Name) {
(0)       if (&User-Name)  -> TRUE
(0)       if (&User-Name)  {
(0)         if (&User-Name =~ / /) {
(0)         if (&User-Name =~ / /)  -> FALSE
(0)         if (&User-Name =~ /@[^@]*@/ ) {
(0)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(0)         if (&User-Name =~ /\.\./ ) {
(0)         if (&User-Name =~ /\.\./ )  -> FALSE
(0)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(0)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(0)         if (&User-Name =~ /\.$/)  {
(0)         if (&User-Name =~ /\.$/)   -> FALSE
(0)         if (&User-Name =~ /@\./)  {
(0)         if (&User-Name =~ /@\./)   -> FALSE
(0)       } # if (&User-Name)  = notfound
(0)     } # policy filter_username = notfound
(0)     [preprocess] = ok
(0)     [chap] = noop
(0)     [mschap] = noop
(0)     [digest] = noop
(0) suffix: Checking for suffix after "@"
(0) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(0) suffix: No such realm "NULL"
(0)     [suffix] = noop
(0) eap: Peer sent EAP Response (code 2) ID 15 length 10
(0) eap: EAP-Identity reply, returning 'ok' so we can short-circuit the rest of authorize
(0)     [eap] = ok
(0)   } # authorize = ok
(0) Found Auth-Type = eap
(0) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(0)   authenticate {
(0) eap: Peer sent packet with method EAP Identity (1)
(0) eap: Calling submodule eap_md5 to process data
(0) eap_md5: Issuing MD5 Challenge
(0) eap: Sending EAP Request (code 1) ID 16 length 22
(0) eap: EAP session adding &reply:State = 0xe935f1d0e925f55d
(0)     [eap] = handled
(0)   } # authenticate = handled
(0) Using Post-Auth-Type Challenge
(0) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(0)   Challenge { ... } # empty sub-section is ignored
(0) Sent Access-Challenge Id 0 from 127.0.0.1:1812 to 127.0.0.1:36150 length 80
(0)   EAP-Message = 0x011000160410bf5f0cc68835c048ca0b56f5d9e701f4
(0)   Message-Authenticator = 0x00000000000000000000000000000000
(0)   State = 0xe935f1d0e925f55d92f4a928e79ea9f6
(0) Finished request
Waking up in 4.9 seconds.
(1) Received Access-Request Id 1 from 127.0.0.1:36150 to 127.0.0.1:1812 length 236
(1)   User-Name = "wiced"
(1)   NAS-IP-Address = 127.0.0.1
(1)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(1)   NAS-Port-Type = Wireless-802.11
(1)   Service-Type = Framed-User
(1)   NAS-Port = 1
(1)   Calling-Station-Id = "D4-53-83-BE-23-62"
(1)   Connect-Info = "CONNECT 54Mbps 802.11g"
(1)   Acct-Session-Id = "3E3D94C523705EF6"
(1)   Acct-Multi-Session-Id = "6AA29C8D2F2A27C8"
(1)   WLAN-Pairwise-Cipher = 1027076
(1)   WLAN-Group-Cipher = 1027076
(1)   WLAN-AKM-Suite = 1027073
(1)   WLAN-Group-Mgmt-Cipher = 1027078
(1)   Framed-MTU = 1400
(1)   EAP-Message = 0x021000060319
(1)   State = 0xe935f1d0e925f55d92f4a928e79ea9f6
(1)   Message-Authenticator = 0xe8a0edba291d21a576ea240d1789ed59
(1) session-state: No cached attributes
(1) # Executing section authorize from file Freeradius/Conf/E_wpa2//sites-enabled/default
(1)   authorize {
(1)     policy filter_username {
(1)       if (&User-Name) {
(1)       if (&User-Name)  -> TRUE
(1)       if (&User-Name)  {
(1)         if (&User-Name =~ / /) {
(1)         if (&User-Name =~ / /)  -> FALSE
(1)         if (&User-Name =~ /@[^@]*@/ ) {
(1)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(1)         if (&User-Name =~ /\.\./ ) {
(1)         if (&User-Name =~ /\.\./ )  -> FALSE
(1)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(1)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(1)         if (&User-Name =~ /\.$/)  {
(1)         if (&User-Name =~ /\.$/)   -> FALSE
(1)         if (&User-Name =~ /@\./)  {
(1)         if (&User-Name =~ /@\./)   -> FALSE
(1)       } # if (&User-Name)  = notfound
(1)     } # policy filter_username = notfound
(1)     [preprocess] = ok
(1)     [chap] = noop
(1)     [mschap] = noop
(1)     [digest] = noop
(1) suffix: Checking for suffix after "@"
(1) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(1) suffix: No such realm "NULL"
(1)     [suffix] = noop
(1) eap: Peer sent EAP Response (code 2) ID 16 length 6
(1) eap: No EAP Start, assuming it's an on-going EAP conversation
(1)     [eap] = updated
(1)     [files] = noop
(1)     [expiration] = noop
(1)     [logintime] = noop
Not doing PAP as Auth-Type is already set.
(1)     [pap] = noop
(1)   } # authorize = updated
(1) Found Auth-Type = eap
(1) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(1)   authenticate {
(1) eap: Expiring EAP session with state 0xe935f1d0e925f55d
(1) eap: Finished EAP session with state 0xe935f1d0e925f55d
(1) eap: Previous EAP request found for state 0xe935f1d0e925f55d, released from the list
(1) eap: Peer sent packet with method EAP NAK (3)
(1) eap: Found mutually acceptable type PEAP (25)
(1) eap: Calling submodule eap_peap to process data
(1) eap_peap: (TLS) Initiating new session
(1) eap: Sending EAP Request (code 1) ID 17 length 6
(1) eap: EAP session adding &reply:State = 0xe935f1d0e824e85d
(1)     [eap] = handled
(1)   } # authenticate = handled
(1) Using Post-Auth-Type Challenge
(1) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(1)   Challenge { ... } # empty sub-section is ignored
(1) session-state: Saving cached attributes
(1)   Framed-MTU = 994
(1) Sent Access-Challenge Id 1 from 127.0.0.1:1812 to 127.0.0.1:36150 length 64
(1)   EAP-Message = 0x011100061920
(1)   Message-Authenticator = 0x00000000000000000000000000000000
(1)   State = 0xe935f1d0e824e85d92f4a928e79ea9f6
(1) Finished request
Waking up in 4.9 seconds.
(2) Received Access-Request Id 2 from 127.0.0.1:36150 to 127.0.0.1:1812 length 406
(2)   User-Name = "wiced"
(2)   NAS-IP-Address = 127.0.0.1
(2)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(2)   NAS-Port-Type = Wireless-802.11
(2)   Service-Type = Framed-User
(2)   NAS-Port = 1
(2)   Calling-Station-Id = "D4-53-83-BE-23-62"
(2)   Connect-Info = "CONNECT 54Mbps 802.11g"
(2)   Acct-Session-Id = "3E3D94C523705EF6"
(2)   Acct-Multi-Session-Id = "6AA29C8D2F2A27C8"
(2)   WLAN-Pairwise-Cipher = 1027076
(2)   WLAN-Group-Cipher = 1027076
(2)   WLAN-AKM-Suite = 1027073
(2)   WLAN-Group-Mgmt-Cipher = 1027078
(2)   Framed-MTU = 1400
(2)   EAP-Message = 0x021100b01980000000a616030100a10100009d0303000003de71208f8334183d4dce95722b1974dbdd727843fcd38a04541146408100003ac030c0aec0a8006b00c400390088006700be00330045c02cc02bc0afc023c009c00ac004c005c02f003d00c000350084003c00ba002f004100ff0100003a000d001600140603060105030501040304010303030102030201000a000e000c001800170016001a00150013000b000201000016000000170000
(2)   State = 0xe935f1d0e824e85d92f4a928e79ea9f6
(2)   Message-Authenticator = 0x7631d2370ab34b542738023df98d64fa
(2) Restoring &session-state
(2)   &session-state:Framed-MTU = 994
(2) # Executing section authorize from file Freeradius/Conf/E_wpa2//sites-enabled/default
(2)   authorize {
(2)     policy filter_username {
(2)       if (&User-Name) {
(2)       if (&User-Name)  -> TRUE
(2)       if (&User-Name)  {
(2)         if (&User-Name =~ / /) {
(2)         if (&User-Name =~ / /)  -> FALSE
(2)         if (&User-Name =~ /@[^@]*@/ ) {
(2)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(2)         if (&User-Name =~ /\.\./ ) {
(2)         if (&User-Name =~ /\.\./ )  -> FALSE
(2)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(2)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(2)         if (&User-Name =~ /\.$/)  {
(2)         if (&User-Name =~ /\.$/)   -> FALSE
(2)         if (&User-Name =~ /@\./)  {
(2)         if (&User-Name =~ /@\./)   -> FALSE
(2)       } # if (&User-Name)  = notfound
(2)     } # policy filter_username = notfound
(2)     [preprocess] = ok
(2)     [chap] = noop
(2)     [mschap] = noop
(2)     [digest] = noop
(2) suffix: Checking for suffix after "@"
(2) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(2) suffix: No such realm "NULL"
(2)     [suffix] = noop
(2) eap: Peer sent EAP Response (code 2) ID 17 length 176
(2) eap: Continuing tunnel setup
(2)     [eap] = ok
(2)   } # authorize = ok
(2) Found Auth-Type = eap
(2) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(2)   authenticate {
(2) eap: Expiring EAP session with state 0xe935f1d0e824e85d
(2) eap: Finished EAP session with state 0xe935f1d0e824e85d
(2) eap: Previous EAP request found for state 0xe935f1d0e824e85d, released from the list
(2) eap: Peer sent packet with method EAP PEAP (25)
(2) eap: Calling submodule eap_peap to process data
(2) eap_peap: (TLS) EAP Peer says that the final record size will be 166 bytes
(2) eap_peap: (TLS) EAP Got all data (166 bytes)
(2) eap_peap: (TLS) Handshake state - before SSL initialization
(2) eap_peap: (TLS) Handshake state - Server before SSL initialization
(2) eap_peap: (TLS) Handshake state - Server before SSL initialization
(2) eap_peap: (TLS) recv TLS 1.3 Handshake, ClientHello
(2) eap_peap: (TLS) Handshake state - Server SSLv3/TLS read client hello
(2) eap_peap: (TLS) send TLS 1.2 Handshake, ServerHello
(2) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write server hello
(2) eap_peap: (TLS) send TLS 1.2 Handshake, Certificate
(2) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write certificate
(2) eap_peap: (TLS) send TLS 1.2 Handshake, ServerKeyExchange
(2) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write key exchange
(2) eap_peap: (TLS) send TLS 1.2 Handshake, ServerHelloDone
(2) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write server done
(2) eap_peap: (TLS) Server : Need to read more data: SSLv3/TLS write server done
(2) eap_peap: (TLS) In Handshake Phase
(2) eap: Sending EAP Request (code 1) ID 18 length 1004
(2) eap: EAP session adding &reply:State = 0xe935f1d0eb27e85d
(2)     [eap] = handled
(2)   } # authenticate = handled
(2) Using Post-Auth-Type Challenge
(2) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(2)   Challenge { ... } # empty sub-section is ignored
(2) session-state: Saving cached attributes
(2)   Framed-MTU = 994
(2)   TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(2)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(2)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(2)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(2)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(2) Sent Access-Challenge Id 2 from 127.0.0.1:1812 to 127.0.0.1:36150 length 1068
(2)   EAP-Message = 0x011203ec19c000000aed160303003d020000390303136b73042a51f5b51e8eddc8445defa3852096e03ed95016d83e9514d53a988e00c030000011ff01000100000b00040300010200170000160303092b0b0009270009240004203082041c30820304a003020102020101300d06092a864886f70d01010b0500308193310b3009060355040613024652310f300d06035504080c065261646975733112301006035504070c09536f6d65776865726531153013060355040a0c0c4578616d706c6520496e632e3120301e06092a864886f70d010901161161646d696e406578616d706c652e6f72673126302406035504030c1d4578616d706c6520436572746966696361746520417574686f72697479301e170d3233313232303134323933385a170d3234303231383134323933385a307c310b3009060355040613024652310f300d06035504080c0652616469757331153013060355040a0c0c4578616d706c6520496e632e3123302106035504030c1a4578616d70
(2)   Message-Authenticator = 0x00000000000000000000000000000000
(2)   State = 0xe935f1d0eb27e85d92f4a928e79ea9f6
(2) Finished request
Waking up in 4.9 seconds.
(3) Received Access-Request Id 3 from 127.0.0.1:36150 to 127.0.0.1:1812 length 236
(3)   User-Name = "wiced"
(3)   NAS-IP-Address = 127.0.0.1
(3)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(3)   NAS-Port-Type = Wireless-802.11
(3)   Service-Type = Framed-User
(3)   NAS-Port = 1
(3)   Calling-Station-Id = "D4-53-83-BE-23-62"
(3)   Connect-Info = "CONNECT 54Mbps 802.11g"
(3)   Acct-Session-Id = "3E3D94C523705EF6"
(3)   Acct-Multi-Session-Id = "6AA29C8D2F2A27C8"
(3)   WLAN-Pairwise-Cipher = 1027076
(3)   WLAN-Group-Cipher = 1027076
(3)   WLAN-AKM-Suite = 1027073
(3)   WLAN-Group-Mgmt-Cipher = 1027078
(3)   Framed-MTU = 1400
(3)   EAP-Message = 0x021200061900
(3)   State = 0xe935f1d0eb27e85d92f4a928e79ea9f6
(3)   Message-Authenticator = 0x39cd46dcc0a0c24a0b866eb87f1ed153
(3) Restoring &session-state
(3)   &session-state:Framed-MTU = 994
(3)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(3)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(3)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(3)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(3)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(3) # Executing section authorize from file Freeradius/Conf/E_wpa2//sites-enabled/default
(3)   authorize {
(3)     policy filter_username {
(3)       if (&User-Name) {
(3)       if (&User-Name)  -> TRUE
(3)       if (&User-Name)  {
(3)         if (&User-Name =~ / /) {
(3)         if (&User-Name =~ / /)  -> FALSE
(3)         if (&User-Name =~ /@[^@]*@/ ) {
(3)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(3)         if (&User-Name =~ /\.\./ ) {
(3)         if (&User-Name =~ /\.\./ )  -> FALSE
(3)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(3)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(3)         if (&User-Name =~ /\.$/)  {
(3)         if (&User-Name =~ /\.$/)   -> FALSE
(3)         if (&User-Name =~ /@\./)  {
(3)         if (&User-Name =~ /@\./)   -> FALSE
(3)       } # if (&User-Name)  = notfound
(3)     } # policy filter_username = notfound
(3)     [preprocess] = ok
(3)     [chap] = noop
(3)     [mschap] = noop
(3)     [digest] = noop
(3) suffix: Checking for suffix after "@"
(3) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(3) suffix: No such realm "NULL"
(3)     [suffix] = noop
(3) eap: Peer sent EAP Response (code 2) ID 18 length 6
(3) eap: Continuing tunnel setup
(3)     [eap] = ok
(3)   } # authorize = ok
(3) Found Auth-Type = eap
(3) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(3)   authenticate {
(3) eap: Expiring EAP session with state 0xe935f1d0eb27e85d
(3) eap: Finished EAP session with state 0xe935f1d0eb27e85d
(3) eap: Previous EAP request found for state 0xe935f1d0eb27e85d, released from the list
(3) eap: Peer sent packet with method EAP PEAP (25)
(3) eap: Calling submodule eap_peap to process data
(3) eap_peap: (TLS) Peer ACKed our handshake fragment
(3) eap: Sending EAP Request (code 1) ID 19 length 1000
(3) eap: EAP session adding &reply:State = 0xe935f1d0ea26e85d
(3)     [eap] = handled
(3)   } # authenticate = handled
(3) Using Post-Auth-Type Challenge
(3) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(3)   Challenge { ... } # empty sub-section is ignored
(3) session-state: Saving cached attributes
(3)   Framed-MTU = 994
(3)   TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(3)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(3)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(3)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(3)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(3) Sent Access-Challenge Id 3 from 127.0.0.1:1812 to 127.0.0.1:36150 length 1064
(3)   EAP-Message = 0x011303e81940913833b443f17f8eb51b1830cd4af89799060330d420545419478127696df2da82cd7b9125c49675038f4cb60c47941dc0f5153fd87448f0374dde094880cfbc946d6b3dea8212d61307b398635f56a4a148449d31f5d153c0ec3cff4a558f63abdfc2851153ca51191af3e00f81ecadd7bdfb92106b8f86a51bad2fa680f19319c1ee5ca8835e244842d27fd749b40004fe308204fa308203e2a0030201020214281bc263084bef55e3bf048bdc422fa2cfde27aa300d06092a864886f70d01010b0500308193310b3009060355040613024652310f300d06035504080c065261646975733112301006035504070c09536f6d65776865726531153013060355040a0c0c4578616d706c6520496e632e3120301e06092a864886f70d010901161161646d696e406578616d706c652e6f72673126302406035504030c1d4578616d706c6520436572746966696361746520417574686f72697479301e170d3233313232303134323933315a170d32343032
(3)   Message-Authenticator = 0x00000000000000000000000000000000
(3)   State = 0xe935f1d0ea26e85d92f4a928e79ea9f6
(3) Finished request
Waking up in 4.9 seconds.
(4) Received Access-Request Id 4 from 127.0.0.1:36150 to 127.0.0.1:1812 length 236
(4)   User-Name = "wiced"
(4)   NAS-IP-Address = 127.0.0.1
(4)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(4)   NAS-Port-Type = Wireless-802.11
(4)   Service-Type = Framed-User
(4)   NAS-Port = 1
(4)   Calling-Station-Id = "D4-53-83-BE-23-62"
(4)   Connect-Info = "CONNECT 54Mbps 802.11g"
(4)   Acct-Session-Id = "3E3D94C523705EF6"
(4)   Acct-Multi-Session-Id = "6AA29C8D2F2A27C8"
(4)   WLAN-Pairwise-Cipher = 1027076
(4)   WLAN-Group-Cipher = 1027076
(4)   WLAN-AKM-Suite = 1027073
(4)   WLAN-Group-Mgmt-Cipher = 1027078
(4)   Framed-MTU = 1400
(4)   EAP-Message = 0x021300061900
(4)   State = 0xe935f1d0ea26e85d92f4a928e79ea9f6
(4)   Message-Authenticator = 0xc036743b72c81715da03ceef33e46fef
(4) Restoring &session-state
(4)   &session-state:Framed-MTU = 994
(4)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(4)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(4)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(4)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(4)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(4) # Executing section authorize from file Freeradius/Conf/E_wpa2//sites-enabled/default
(4)   authorize {
(4)     policy filter_username {
(4)       if (&User-Name) {
(4)       if (&User-Name)  -> TRUE
(4)       if (&User-Name)  {
(4)         if (&User-Name =~ / /) {
(4)         if (&User-Name =~ / /)  -> FALSE
(4)         if (&User-Name =~ /@[^@]*@/ ) {
(4)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(4)         if (&User-Name =~ /\.\./ ) {
(4)         if (&User-Name =~ /\.\./ )  -> FALSE
(4)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(4)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(4)         if (&User-Name =~ /\.$/)  {
(4)         if (&User-Name =~ /\.$/)   -> FALSE
(4)         if (&User-Name =~ /@\./)  {
(4)         if (&User-Name =~ /@\./)   -> FALSE
(4)       } # if (&User-Name)  = notfound
(4)     } # policy filter_username = notfound
(4)     [preprocess] = ok
(4)     [chap] = noop
(4)     [mschap] = noop
(4)     [digest] = noop
(4) suffix: Checking for suffix after "@"
(4) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(4) suffix: No such realm "NULL"
(4)     [suffix] = noop
(4) eap: Peer sent EAP Response (code 2) ID 19 length 6
(4) eap: Continuing tunnel setup
(4)     [eap] = ok
(4)   } # authorize = ok
(4) Found Auth-Type = eap
(4) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(4)   authenticate {
(4) eap: Expiring EAP session with state 0xe935f1d0ea26e85d
(4) eap: Finished EAP session with state 0xe935f1d0ea26e85d
(4) eap: Previous EAP request found for state 0xe935f1d0ea26e85d, released from the list
(4) eap: Peer sent packet with method EAP PEAP (25)
(4) eap: Calling submodule eap_peap to process data
(4) eap_peap: (TLS) Peer ACKed our handshake fragment
(4) eap: Sending EAP Request (code 1) ID 20 length 815
(4) eap: EAP session adding &reply:State = 0xe935f1d0ed21e85d
(4)     [eap] = handled
(4)   } # authenticate = handled
(4) Using Post-Auth-Type Challenge
(4) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(4)   Challenge { ... } # empty sub-section is ignored
(4) session-state: Saving cached attributes
(4)   Framed-MTU = 994
(4)   TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(4)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(4)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(4)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(4)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(4) Sent Access-Challenge Id 4 from 127.0.0.1:1812 to 127.0.0.1:36150 length 879
(4)   EAP-Message = 0x0114032f1900161161646d696e406578616d706c652e6f72673126302406035504030c1d4578616d706c6520436572746966696361746520417574686f726974798214281bc263084bef55e3bf048bdc422fa2cfde27aa300f0603551d130101ff040530030101ff30360603551d1f042f302d302ba029a0278625687474703a2f2f7777772e6578616d706c652e6f72672f6578616d706c655f63612e63726c300d06092a864886f70d01010b05000382010100747b534692263eb34b830d3b29c86ca7000c7d61e341b99093fda2b26480553138316b06b5cb9def1ab6116791a97b785529008677afbf6aedc3f37b9387a646bd7fd4d019a287fdea5745d91441b3ca219febbfb1da0dbc9a83293a6e9cb3f3cd80544580baee20a408d77e3640822d2821b95c93fa6f564ea303f204dd43edbb89497f3595bd7271b577b4469f75e3e9f4058fb32cfcf475f0f5abe4584787b1c1aa14d07ac2775c6cb5d5212e1cee4902c2b8c7d2e82628f70ca062ae6cc483803d
(4)   Message-Authenticator = 0x00000000000000000000000000000000
(4)   State = 0xe935f1d0ed21e85d92f4a928e79ea9f6
(4) Finished request
Waking up in 4.9 seconds.
(5) Received Access-Request Id 5 from 127.0.0.1:36150 to 127.0.0.1:1812 length 398
(5)   User-Name = "wiced"
(5)   NAS-IP-Address = 127.0.0.1
(5)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(5)   NAS-Port-Type = Wireless-802.11
(5)   Service-Type = Framed-User
(5)   NAS-Port = 1
(5)   Calling-Station-Id = "D4-53-83-BE-23-62"
(5)   Connect-Info = "CONNECT 54Mbps 802.11g"
(5)   Acct-Session-Id = "3E3D94C523705EF6"
(5)   Acct-Multi-Session-Id = "6AA29C8D2F2A27C8"
(5)   WLAN-Pairwise-Cipher = 1027076
(5)   WLAN-Group-Cipher = 1027076
(5)   WLAN-AKM-Suite = 1027073
(5)   WLAN-Group-Mgmt-Cipher = 1027078
(5)   Framed-MTU = 1400
(5)   EAP-Message = 0x021400a819800000009e16030300661000006261043bad0c48f3a8a4972d377f8707d8baff2f3adbc64da63429aa1570f13f617773381f1b3f17ebad297524ff2d1ced9c8084a69448a618bc80aeab2dbc81c09348290d883af3193d5255d9d83bd40befe218f601c7a6a971862fad07dabcb8de7c1403030001011603030028000000000000000072154601fe337d76a0c594de554599fbfd5bf2d2b4adcae0a2bb56795c7bacaa
(5)   State = 0xe935f1d0ed21e85d92f4a928e79ea9f6
(5)   Message-Authenticator = 0xf175c663fb26a9ac4edf619de9637b05
(5) Restoring &session-state
(5)   &session-state:Framed-MTU = 994
(5)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(5)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(5)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(5)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(5)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(5) # Executing section authorize from file Freeradius/Conf/E_wpa2//sites-enabled/default
(5)   authorize {
(5)     policy filter_username {
(5)       if (&User-Name) {
(5)       if (&User-Name)  -> TRUE
(5)       if (&User-Name)  {
(5)         if (&User-Name =~ / /) {
(5)         if (&User-Name =~ / /)  -> FALSE
(5)         if (&User-Name =~ /@[^@]*@/ ) {
(5)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(5)         if (&User-Name =~ /\.\./ ) {
(5)         if (&User-Name =~ /\.\./ )  -> FALSE
(5)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(5)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(5)         if (&User-Name =~ /\.$/)  {
(5)         if (&User-Name =~ /\.$/)   -> FALSE
(5)         if (&User-Name =~ /@\./)  {
(5)         if (&User-Name =~ /@\./)   -> FALSE
(5)       } # if (&User-Name)  = notfound
(5)     } # policy filter_username = notfound
(5)     [preprocess] = ok
(5)     [chap] = noop
(5)     [mschap] = noop
(5)     [digest] = noop
(5) suffix: Checking for suffix after "@"
(5) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(5) suffix: No such realm "NULL"
(5)     [suffix] = noop
(5) eap: Peer sent EAP Response (code 2) ID 20 length 168
(5) eap: Continuing tunnel setup
(5)     [eap] = ok
(5)   } # authorize = ok
(5) Found Auth-Type = eap
(5) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(5)   authenticate {
(5) eap: Expiring EAP session with state 0xe935f1d0ed21e85d
(5) eap: Finished EAP session with state 0xe935f1d0ed21e85d
(5) eap: Previous EAP request found for state 0xe935f1d0ed21e85d, released from the list
(5) eap: Peer sent packet with method EAP PEAP (25)
(5) eap: Calling submodule eap_peap to process data
(5) eap_peap: (TLS) EAP Peer says that the final record size will be 158 bytes
(5) eap_peap: (TLS) EAP Got all data (158 bytes)
(5) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write server done
(5) eap_peap: (TLS) recv TLS 1.2 Handshake, ClientKeyExchange
(5) eap_peap: (TLS) Handshake state - Server SSLv3/TLS read client key exchange
(5) eap_peap: (TLS) Handshake state - Server SSLv3/TLS read change cipher spec
(5) eap_peap: (TLS) recv TLS 1.2 Handshake, Finished
(5) eap_peap: (TLS) Handshake state - Server SSLv3/TLS read finished
(5) eap_peap: (TLS) send TLS 1.2 ChangeCipherSpec
(5) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write change cipher spec
(5) eap_peap: (TLS) send TLS 1.2 Handshake, Finished
(5) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write finished
(5) eap_peap: (TLS) Handshake state - SSL negotiation finished successfully
(5) eap_peap: (TLS) Connection Established
(5) eap_peap:   TLS-Session-Cipher-Suite = "ECDHE-RSA-AES256-GCM-SHA384"
(5) eap_peap:   TLS-Session-Version = "TLS 1.2"
(5) eap: Sending EAP Request (code 1) ID 21 length 57
(5) eap: EAP session adding &reply:State = 0xe935f1d0ec20e85d
(5)     [eap] = handled
(5)   } # authenticate = handled
(5) Using Post-Auth-Type Challenge
(5) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(5)   Challenge { ... } # empty sub-section is ignored
(5) session-state: Saving cached attributes
(5)   Framed-MTU = 994
(5)   TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(5)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(5)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(5)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(5)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(5)   TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, ClientKeyExchange"
(5)   TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, Finished"
(5)   TLS-Session-Information = "(TLS) send TLS 1.2 ChangeCipherSpec"
(5)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Finished"
(5)   TLS-Session-Cipher-Suite = "ECDHE-RSA-AES256-GCM-SHA384"
(5)   TLS-Session-Version = "TLS 1.2"
(5) Sent Access-Challenge Id 5 from 127.0.0.1:1812 to 127.0.0.1:36150 length 115
(5)   EAP-Message = 0x0115003919001403030001011603030028adf5b3d1d7541c88c85d503884e6434108cf4286b69776a80eb9bf95acb7921eaae251b927338945
(5)   Message-Authenticator = 0x00000000000000000000000000000000
(5)   State = 0xe935f1d0ec20e85d92f4a928e79ea9f6
(5) Finished request
Waking up in 4.6 seconds.
(6) Received Access-Request Id 6 from 127.0.0.1:36150 to 127.0.0.1:1812 length 236
(6)   User-Name = "wiced"
(6)   NAS-IP-Address = 127.0.0.1
(6)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(6)   NAS-Port-Type = Wireless-802.11
(6)   Service-Type = Framed-User
(6)   NAS-Port = 1
(6)   Calling-Station-Id = "D4-53-83-BE-23-62"
(6)   Connect-Info = "CONNECT 54Mbps 802.11g"
(6)   Acct-Session-Id = "3E3D94C523705EF6"
(6)   Acct-Multi-Session-Id = "6AA29C8D2F2A27C8"
(6)   WLAN-Pairwise-Cipher = 1027076
(6)   WLAN-Group-Cipher = 1027076
(6)   WLAN-AKM-Suite = 1027073
(6)   WLAN-Group-Mgmt-Cipher = 1027078
(6)   Framed-MTU = 1400
(6)   EAP-Message = 0x021500061900
(6)   State = 0xe935f1d0ec20e85d92f4a928e79ea9f6
(6)   Message-Authenticator = 0xa196c3c2b47e1e611c23687c76fc5556
(6) Restoring &session-state
(6)   &session-state:Framed-MTU = 994
(6)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(6)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(6)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(6)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(6)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(6)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, ClientKeyExchange"
(6)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, Finished"
(6)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 ChangeCipherSpec"
(6)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Finished"
(6)   &session-state:TLS-Session-Cipher-Suite = "ECDHE-RSA-AES256-GCM-SHA384"
(6)   &session-state:TLS-Session-Version = "TLS 1.2"
(6) # Executing section authorize from file Freeradius/Conf/E_wpa2//sites-enabled/default
(6)   authorize {
(6)     policy filter_username {
(6)       if (&User-Name) {
(6)       if (&User-Name)  -> TRUE
(6)       if (&User-Name)  {
(6)         if (&User-Name =~ / /) {
(6)         if (&User-Name =~ / /)  -> FALSE
(6)         if (&User-Name =~ /@[^@]*@/ ) {
(6)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(6)         if (&User-Name =~ /\.\./ ) {
(6)         if (&User-Name =~ /\.\./ )  -> FALSE
(6)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(6)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(6)         if (&User-Name =~ /\.$/)  {
(6)         if (&User-Name =~ /\.$/)   -> FALSE
(6)         if (&User-Name =~ /@\./)  {
(6)         if (&User-Name =~ /@\./)   -> FALSE
(6)       } # if (&User-Name)  = notfound
(6)     } # policy filter_username = notfound
(6)     [preprocess] = ok
(6)     [chap] = noop
(6)     [mschap] = noop
(6)     [digest] = noop
(6) suffix: Checking for suffix after "@"
(6) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(6) suffix: No such realm "NULL"
(6)     [suffix] = noop
(6) eap: Peer sent EAP Response (code 2) ID 21 length 6
(6) eap: Continuing tunnel setup
(6)     [eap] = ok
(6)   } # authorize = ok
(6) Found Auth-Type = eap
(6) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(6)   authenticate {
(6) eap: Expiring EAP session with state 0xe935f1d0ec20e85d
(6) eap: Finished EAP session with state 0xe935f1d0ec20e85d
(6) eap: Previous EAP request found for state 0xe935f1d0ec20e85d, released from the list
(6) eap: Peer sent packet with method EAP PEAP (25)
(6) eap: Calling submodule eap_peap to process data
(6) eap_peap: (TLS) Peer ACKed our handshake fragment.  handshake is finished
(6) eap_peap: Session established.  Decoding tunneled attributes
(6) eap_peap: PEAP state TUNNEL ESTABLISHED
(6) eap: Sending EAP Request (code 1) ID 22 length 40
(6) eap: EAP session adding &reply:State = 0xe935f1d0ef23e85d
(6)     [eap] = handled
(6)   } # authenticate = handled
(6) Using Post-Auth-Type Challenge
(6) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(6)   Challenge { ... } # empty sub-section is ignored
(6) session-state: Saving cached attributes
(6)   Framed-MTU = 994
(6)   TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(6)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(6)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(6)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(6)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(6)   TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, ClientKeyExchange"
(6)   TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, Finished"
(6)   TLS-Session-Information = "(TLS) send TLS 1.2 ChangeCipherSpec"
(6)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Finished"
(6)   TLS-Session-Cipher-Suite = "ECDHE-RSA-AES256-GCM-SHA384"
(6)   TLS-Session-Version = "TLS 1.2"
(6) Sent Access-Challenge Id 6 from 127.0.0.1:1812 to 127.0.0.1:36150 length 98
(6)   EAP-Message = 0x011600281900170303001dadf5b3d1d7541c899e6786d8c8286b3d2f2b1999b151dbe62f4997c995
(6)   Message-Authenticator = 0x00000000000000000000000000000000
(6)   State = 0xe935f1d0ef23e85d92f4a928e79ea9f6
(6) Finished request
Waking up in 4.6 seconds.
(7) Received Access-Request Id 7 from 127.0.0.1:36150 to 127.0.0.1:1812 length 281
(7)   User-Name = "wiced"
(7)   NAS-IP-Address = 127.0.0.1
(7)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(7)   NAS-Port-Type = Wireless-802.11
(7)   Service-Type = Framed-User
(7)   NAS-Port = 1
(7)   Calling-Station-Id = "D4-53-83-BE-23-62"
(7)   Connect-Info = "CONNECT 54Mbps 802.11g"
(7)   Acct-Session-Id = "3E3D94C523705EF6"
(7)   Acct-Multi-Session-Id = "6AA29C8D2F2A27C8"
(7)   WLAN-Pairwise-Cipher = 1027076
(7)   WLAN-Group-Cipher = 1027076
(7)   WLAN-AKM-Suite = 1027073
(7)   WLAN-Group-Mgmt-Cipher = 1027078
(7)   Framed-MTU = 1400
(7)   EAP-Message = 0x02160033190017030300280000000000000001b521ec7194e4ec4e495bae5c68c05e673e94afe2d771db9684355e0d41301a7b
(7)   State = 0xe935f1d0ef23e85d92f4a928e79ea9f6
(7)   Message-Authenticator = 0x526f357ac7e32f5255108f63b7628ce5
(7) Restoring &session-state
(7)   &session-state:Framed-MTU = 994
(7)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(7)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(7)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(7)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(7)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(7)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, ClientKeyExchange"
(7)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, Finished"
(7)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 ChangeCipherSpec"
(7)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Finished"
(7)   &session-state:TLS-Session-Cipher-Suite = "ECDHE-RSA-AES256-GCM-SHA384"
(7)   &session-state:TLS-Session-Version = "TLS 1.2"
(7) # Executing section authorize from file Freeradius/Conf/E_wpa2//sites-enabled/default
(7)   authorize {
(7)     policy filter_username {
(7)       if (&User-Name) {
(7)       if (&User-Name)  -> TRUE
(7)       if (&User-Name)  {
(7)         if (&User-Name =~ / /) {
(7)         if (&User-Name =~ / /)  -> FALSE
(7)         if (&User-Name =~ /@[^@]*@/ ) {
(7)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(7)         if (&User-Name =~ /\.\./ ) {
(7)         if (&User-Name =~ /\.\./ )  -> FALSE
(7)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(7)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(7)         if (&User-Name =~ /\.$/)  {
(7)         if (&User-Name =~ /\.$/)   -> FALSE
(7)         if (&User-Name =~ /@\./)  {
(7)         if (&User-Name =~ /@\./)   -> FALSE
(7)       } # if (&User-Name)  = notfound
(7)     } # policy filter_username = notfound
(7)     [preprocess] = ok
(7)     [chap] = noop
(7)     [mschap] = noop
(7)     [digest] = noop
(7) suffix: Checking for suffix after "@"
(7) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(7) suffix: No such realm "NULL"
(7)     [suffix] = noop
(7) eap: Peer sent EAP Response (code 2) ID 22 length 51
(7) eap: Continuing tunnel setup
(7)     [eap] = ok
(7)   } # authorize = ok
(7) Found Auth-Type = eap
(7) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(7)   authenticate {
(7) eap: Expiring EAP session with state 0xe935f1d0ef23e85d
(7) eap: Finished EAP session with state 0xe935f1d0ef23e85d
(7) eap: Previous EAP request found for state 0xe935f1d0ef23e85d, released from the list
(7) eap: Peer sent packet with method EAP PEAP (25)
(7) eap: Calling submodule eap_peap to process data
(7) eap_peap: (TLS) EAP Done initial handshake
(7) eap_peap: Session established.  Decoding tunneled attributes
(7) eap_peap: PEAP state WAITING FOR INNER IDENTITY
(7) eap_peap: Identity - bob@example.org
(7) eap_peap: Got inner identity 'bob@example.org'
(7) eap_peap: Setting default EAP type for tunneled EAP session
(7) eap_peap: Got tunneled request
(7) eap_peap:   EAP-Message = 0x0216001401626f62406578616d706c652e6f7267
(7) eap_peap: Setting User-Name to bob@example.org
(7) eap_peap: Sending tunneled request to inner-tunnel
(7) eap_peap:   EAP-Message = 0x0216001401626f62406578616d706c652e6f7267
(7) eap_peap:   FreeRADIUS-Proxied-To = 127.0.0.1
(7) eap_peap:   User-Name = "bob@example.org"
(7) Virtual server inner-tunnel received request
(7)   EAP-Message = 0x0216001401626f62406578616d706c652e6f7267
(7)   FreeRADIUS-Proxied-To = 127.0.0.1
(7)   User-Name = "bob@example.org"
(7) WARNING: Outer User-Name is not anonymized.  User privacy is compromised.
(7) server inner-tunnel {
(7)   # Executing section authorize from file Freeradius/Conf/E_wpa2//sites-enabled/inner-tunnel
(7)     authorize {
(7)       policy filter_username {
(7)         if (&User-Name) {
(7)         if (&User-Name)  -> TRUE
(7)         if (&User-Name)  {
(7)           if (&User-Name =~ / /) {
(7)           if (&User-Name =~ / /)  -> FALSE
(7)           if (&User-Name =~ /@[^@]*@/ ) {
(7)           if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(7)           if (&User-Name =~ /\.\./ ) {
(7)           if (&User-Name =~ /\.\./ )  -> FALSE
(7)           if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(7)           if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(7)           if (&User-Name =~ /\.$/)  {
(7)           if (&User-Name =~ /\.$/)   -> FALSE
(7)           if (&User-Name =~ /@\./)  {
(7)           if (&User-Name =~ /@\./)   -> FALSE
(7)         } # if (&User-Name)  = notfound
(7)       } # policy filter_username = notfound
(7)       [chap] = noop
(7)       [mschap] = noop
(7) suffix: Checking for suffix after "@"
(7) suffix: Looking up realm "example.org" for User-Name = "bob@example.org"
(7) suffix: No such realm "example.org"
(7)       [suffix] = noop
(7)       update control {
(7)         &Proxy-To-Realm := LOCAL
(7)       } # update control = noop
(7) eap: Peer sent EAP Response (code 2) ID 22 length 20
(7) eap: EAP-Identity reply, returning 'ok' so we can short-circuit the rest of authorize
(7)       [eap] = ok
(7)     } # authorize = ok
(7)   Found Auth-Type = eap
(7)   # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/inner-tunnel
(7)     authenticate {
(7) eap: Peer sent packet with method EAP Identity (1)
(7) eap: Calling submodule eap_mschapv2 to process data
(7) eap_mschapv2: Issuing Challenge
(7) eap: Sending EAP Request (code 1) ID 23 length 43
(7) eap: EAP session adding &reply:State = 0x3d33d93a3d24c301
(7)       [eap] = handled
(7)     } # authenticate = handled
(7) } # server inner-tunnel
(7) Virtual server sending reply
(7)   EAP-Message = 0x0117002b1a0117002610f37be350bfb5fdceba6defadaf69bebd667265657261646975732d332e302e3236
(7)   Message-Authenticator = 0x00000000000000000000000000000000
(7)   State = 0x3d33d93a3d24c3014af44b9fcf333724
(7) eap_peap: Got tunneled reply code 11
(7) eap_peap:   EAP-Message = 0x0117002b1a0117002610f37be350bfb5fdceba6defadaf69bebd667265657261646975732d332e302e3236
(7) eap_peap:   Message-Authenticator = 0x00000000000000000000000000000000
(7) eap_peap:   State = 0x3d33d93a3d24c3014af44b9fcf333724
(7) eap_peap: Got tunneled reply RADIUS code 11
(7) eap_peap:   EAP-Message = 0x0117002b1a0117002610f37be350bfb5fdceba6defadaf69bebd667265657261646975732d332e302e3236
(7) eap_peap:   Message-Authenticator = 0x00000000000000000000000000000000
(7) eap_peap:   State = 0x3d33d93a3d24c3014af44b9fcf333724
(7) eap_peap: Got tunneled Access-Challenge
(7) eap: Sending EAP Request (code 1) ID 23 length 74
(7) eap: EAP session adding &reply:State = 0xe935f1d0ee22e85d
(7)     [eap] = handled
(7)   } # authenticate = handled
(7) Using Post-Auth-Type Challenge
(7) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(7)   Challenge { ... } # empty sub-section is ignored
(7) session-state: Saving cached attributes
(7)   Framed-MTU = 994
(7)   TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(7)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(7)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(7)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(7)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(7)   TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, ClientKeyExchange"
(7)   TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, Finished"
(7)   TLS-Session-Information = "(TLS) send TLS 1.2 ChangeCipherSpec"
(7)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Finished"
(7)   TLS-Session-Cipher-Suite = "ECDHE-RSA-AES256-GCM-SHA384"
(7)   TLS-Session-Version = "TLS 1.2"
(7) Sent Access-Challenge Id 7 from 127.0.0.1:1812 to 127.0.0.1:36150 length 132
(7)   EAP-Message = 0x0117004a1900170303003fadf5b3d1d7541c8a7cecaa85d36d4611fbb139a5a59a03be4ea99fdb9cf24a14436f7351b866eae5235745f143b775ed1f510c2ab9eab3f5b5a2d309f7924a
(7)   Message-Authenticator = 0x00000000000000000000000000000000
(7)   State = 0xe935f1d0ee22e85d92f4a928e79ea9f6
(7) Finished request
Waking up in 4.6 seconds.
(8) Received Access-Request Id 8 from 127.0.0.1:36150 to 127.0.0.1:1812 length 335
(8)   User-Name = "wiced"
(8)   NAS-IP-Address = 127.0.0.1
(8)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(8)   NAS-Port-Type = Wireless-802.11
(8)   Service-Type = Framed-User
(8)   NAS-Port = 1
(8)   Calling-Station-Id = "D4-53-83-BE-23-62"
(8)   Connect-Info = "CONNECT 54Mbps 802.11g"
(8)   Acct-Session-Id = "3E3D94C523705EF6"
(8)   Acct-Multi-Session-Id = "6AA29C8D2F2A27C8"
(8)   WLAN-Pairwise-Cipher = 1027076
(8)   WLAN-Group-Cipher = 1027076
(8)   WLAN-AKM-Suite = 1027073
(8)   WLAN-Group-Mgmt-Cipher = 1027078
(8)   Framed-MTU = 1400
(8)   EAP-Message = 0x021700691900170303005e00000000000000020024c24d55cea0df0c366084cd0a2987df16dfda6c63201963f4768a74e2fdd3d7f81aac9f5f0aa5292f327cb1299ca81b4294e41a37cf9eb7dfe0ccb27ac1d83829c2d03f64ec2d6e94563856ce636e7b60669f7b34
(8)   State = 0xe935f1d0ee22e85d92f4a928e79ea9f6
(8)   Message-Authenticator = 0x1c3371b7ae93ab7bd79bc59f35a2fb7d
(8) Restoring &session-state
(8)   &session-state:Framed-MTU = 994
(8)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(8)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(8)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(8)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(8)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(8)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, ClientKeyExchange"
(8)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, Finished"
(8)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 ChangeCipherSpec"
(8)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Finished"
(8)   &session-state:TLS-Session-Cipher-Suite = "ECDHE-RSA-AES256-GCM-SHA384"
(8)   &session-state:TLS-Session-Version = "TLS 1.2"
(8) # Executing section authorize from file Freeradius/Conf/E_wpa2//sites-enabled/default
(8)   authorize {
(8)     policy filter_username {
(8)       if (&User-Name) {
(8)       if (&User-Name)  -> TRUE
(8)       if (&User-Name)  {
(8)         if (&User-Name =~ / /) {
(8)         if (&User-Name =~ / /)  -> FALSE
(8)         if (&User-Name =~ /@[^@]*@/ ) {
(8)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(8)         if (&User-Name =~ /\.\./ ) {
(8)         if (&User-Name =~ /\.\./ )  -> FALSE
(8)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(8)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(8)         if (&User-Name =~ /\.$/)  {
(8)         if (&User-Name =~ /\.$/)   -> FALSE
(8)         if (&User-Name =~ /@\./)  {
(8)         if (&User-Name =~ /@\./)   -> FALSE
(8)       } # if (&User-Name)  = notfound
(8)     } # policy filter_username = notfound
(8)     [preprocess] = ok
(8)     [chap] = noop
(8)     [mschap] = noop
(8)     [digest] = noop
(8) suffix: Checking for suffix after "@"
(8) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(8) suffix: No such realm "NULL"
(8)     [suffix] = noop
(8) eap: Peer sent EAP Response (code 2) ID 23 length 105
(8) eap: Continuing tunnel setup
(8)     [eap] = ok
(8)   } # authorize = ok
(8) Found Auth-Type = eap
(8) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(8)   authenticate {
(8) eap: Expiring EAP session with state 0x3d33d93a3d24c301
(8) eap: Finished EAP session with state 0xe935f1d0ee22e85d
(8) eap: Previous EAP request found for state 0xe935f1d0ee22e85d, released from the list
(8) eap: Peer sent packet with method EAP PEAP (25)
(8) eap: Calling submodule eap_peap to process data
(8) eap_peap: (TLS) EAP Done initial handshake
(8) eap_peap: Session established.  Decoding tunneled attributes
(8) eap_peap: PEAP state phase2
(8) eap_peap: EAP method MSCHAPv2 (26)
(8) eap_peap: Got tunneled request
(8) eap_peap:   EAP-Message = 0x0217004a1a02170045319991995b391e7dd88637c08b25bfe28b0000000000000000618c8f4fc2378e118d71def49344957ae16a7392e8fc30981c626f62406578616d706c652e6f7267
(8) eap_peap: Setting User-Name to bob@example.org
(8) eap_peap: Sending tunneled request to inner-tunnel
(8) eap_peap:   EAP-Message = 0x0217004a1a02170045319991995b391e7dd88637c08b25bfe28b0000000000000000618c8f4fc2378e118d71def49344957ae16a7392e8fc30981c626f62406578616d706c652e6f7267
(8) eap_peap:   FreeRADIUS-Proxied-To = 127.0.0.1
(8) eap_peap:   User-Name = "bob@example.org"
(8) eap_peap:   State = 0x3d33d93a3d24c3014af44b9fcf333724
(8) Virtual server inner-tunnel received request
(8)   EAP-Message = 0x0217004a1a02170045319991995b391e7dd88637c08b25bfe28b0000000000000000618c8f4fc2378e118d71def49344957ae16a7392e8fc30981c626f62406578616d706c652e6f7267
(8)   FreeRADIUS-Proxied-To = 127.0.0.1
(8)   User-Name = "bob@example.org"
(8)   State = 0x3d33d93a3d24c3014af44b9fcf333724
(8) WARNING: Outer User-Name is not anonymized.  User privacy is compromised.
(8) server inner-tunnel {
(8)   session-state: No cached attributes
(8)   # Executing section authorize from file Freeradius/Conf/E_wpa2//sites-enabled/inner-tunnel
(8)     authorize {
(8)       policy filter_username {
(8)         if (&User-Name) {
(8)         if (&User-Name)  -> TRUE
(8)         if (&User-Name)  {
(8)           if (&User-Name =~ / /) {
(8)           if (&User-Name =~ / /)  -> FALSE
(8)           if (&User-Name =~ /@[^@]*@/ ) {
(8)           if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(8)           if (&User-Name =~ /\.\./ ) {
(8)           if (&User-Name =~ /\.\./ )  -> FALSE
(8)           if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(8)           if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(8)           if (&User-Name =~ /\.$/)  {
(8)           if (&User-Name =~ /\.$/)   -> FALSE
(8)           if (&User-Name =~ /@\./)  {
(8)           if (&User-Name =~ /@\./)   -> FALSE
(8)         } # if (&User-Name)  = notfound
(8)       } # policy filter_username = notfound
(8)       [chap] = noop
(8)       [mschap] = noop
(8) suffix: Checking for suffix after "@"
(8) suffix: Looking up realm "example.org" for User-Name = "bob@example.org"
(8) suffix: No such realm "example.org"
(8)       [suffix] = noop
(8)       update control {
(8)         &Proxy-To-Realm := LOCAL
(8)       } # update control = noop
(8) eap: Peer sent EAP Response (code 2) ID 23 length 74
(8) eap: No EAP Start, assuming it's an on-going EAP conversation
(8)       [eap] = updated
(8) files: users: Matched entry bob@example.org at line 1
(8) files: EXPAND Hello, %{User-Name}
(8) files:    --> Hello, bob@example.org
(8)       [files] = ok
(8)       [expiration] = noop
(8)       [logintime] = noop
(8) pap: WARNING: Auth-Type already set.  Not setting to PAP
(8)       [pap] = noop
(8)     } # authorize = updated
(8)   Found Auth-Type = eap
(8)   # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/inner-tunnel
(8)     authenticate {
(8) eap: Expiring EAP session with state 0x3d33d93a3d24c301
(8) eap: Finished EAP session with state 0x3d33d93a3d24c301
(8) eap: Previous EAP request found for state 0x3d33d93a3d24c301, released from the list
(8) eap: Peer sent packet with method EAP MSCHAPv2 (26)
(8) eap: Calling submodule eap_mschapv2 to process data
(8) eap_mschapv2: # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/inner-tunnel
(8) eap_mschapv2:   authenticate {
(8) mschap: Found Cleartext-Password, hashing to create NT-Password
(8) mschap: Creating challenge hash with username: bob@example.org
(8) mschap: Client is using MS-CHAPv2
(8) mschap: Adding MS-CHAPv2 MPPE keys
(8) eap_mschapv2:     [mschap] = ok
(8) eap_mschapv2:   } # authenticate = ok
(8) eap_mschapv2: MSCHAP Success
(8) eap: Sending EAP Request (code 1) ID 24 length 51
(8) eap: EAP session adding &reply:State = 0x3d33d93a3c2bc301
(8)       [eap] = handled
(8)     } # authenticate = handled
(8) } # server inner-tunnel
(8) Virtual server sending reply
(8)   Reply-Message = "Hello, bob@example.org"
(8)   EAP-Message = 0x011800331a0317002e533d42393437353946314145423934363331373842453435423530434243463044393632314537393644
(8)   Message-Authenticator = 0x00000000000000000000000000000000
(8)   State = 0x3d33d93a3c2bc3014af44b9fcf333724
(8) eap_peap: Got tunneled reply code 11
(8) eap_peap:   Reply-Message = "Hello, bob@example.org"
(8) eap_peap:   EAP-Message = 0x011800331a0317002e533d42393437353946314145423934363331373842453435423530434243463044393632314537393644
(8) eap_peap:   Message-Authenticator = 0x00000000000000000000000000000000
(8) eap_peap:   State = 0x3d33d93a3c2bc3014af44b9fcf333724
(8) eap_peap: Got tunneled reply RADIUS code 11
(8) eap_peap:   Reply-Message = "Hello, bob@example.org"
(8) eap_peap:   EAP-Message = 0x011800331a0317002e533d42393437353946314145423934363331373842453435423530434243463044393632314537393644
(8) eap_peap:   Message-Authenticator = 0x00000000000000000000000000000000
(8) eap_peap:   State = 0x3d33d93a3c2bc3014af44b9fcf333724
(8) eap_peap: Got tunneled Access-Challenge
(8) eap: Sending EAP Request (code 1) ID 24 length 82
(8) eap: EAP session adding &reply:State = 0xe935f1d0e12de85d
(8)     [eap] = handled
(8)   } # authenticate = handled
(8) Using Post-Auth-Type Challenge
(8) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(8)   Challenge { ... } # empty sub-section is ignored
(8) session-state: Saving cached attributes
(8)   Framed-MTU = 994
(8)   TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(8)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(8)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(8)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(8)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(8)   TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, ClientKeyExchange"
(8)   TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, Finished"
(8)   TLS-Session-Information = "(TLS) send TLS 1.2 ChangeCipherSpec"
(8)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Finished"
(8)   TLS-Session-Cipher-Suite = "ECDHE-RSA-AES256-GCM-SHA384"
(8)   TLS-Session-Version = "TLS 1.2"
(8) Sent Access-Challenge Id 8 from 127.0.0.1:1812 to 127.0.0.1:36150 length 140
(8)   EAP-Message = 0x0118005219001703030047adf5b3d1d7541c8b81f93036739f8e4984455411f969040e48f73cac026ab8e6799c56a72895275569d5e78af2126d17e06c6717e42bb271ef0d67d04e228a753a965b04199f8f
(8)   Message-Authenticator = 0x00000000000000000000000000000000
(8)   State = 0xe935f1d0e12de85d92f4a928e79ea9f6
(8) Finished request
Waking up in 4.6 seconds.
(9) Received Access-Request Id 9 from 127.0.0.1:36150 to 127.0.0.1:1812 length 267
(9)   User-Name = "wiced"
(9)   NAS-IP-Address = 127.0.0.1
(9)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(9)   NAS-Port-Type = Wireless-802.11
(9)   Service-Type = Framed-User
(9)   NAS-Port = 1
(9)   Calling-Station-Id = "D4-53-83-BE-23-62"
(9)   Connect-Info = "CONNECT 54Mbps 802.11g"
(9)   Acct-Session-Id = "3E3D94C523705EF6"
(9)   Acct-Multi-Session-Id = "6AA29C8D2F2A27C8"
(9)   WLAN-Pairwise-Cipher = 1027076
(9)   WLAN-Group-Cipher = 1027076
(9)   WLAN-AKM-Suite = 1027073
(9)   WLAN-Group-Mgmt-Cipher = 1027078
(9)   Framed-MTU = 1400
(9)   EAP-Message = 0x021800251900170303001a00000000000000038dee337ec05f9f1487e6bb290fab34cbeb8d
(9)   State = 0xe935f1d0e12de85d92f4a928e79ea9f6
(9)   Message-Authenticator = 0x774b4230f5f88623f24deb9c03f0c4bf
(9) Restoring &session-state
(9)   &session-state:Framed-MTU = 994
(9)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(9)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(9)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(9)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(9)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(9)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, ClientKeyExchange"
(9)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, Finished"
(9)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 ChangeCipherSpec"
(9)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Finished"
(9)   &session-state:TLS-Session-Cipher-Suite = "ECDHE-RSA-AES256-GCM-SHA384"
(9)   &session-state:TLS-Session-Version = "TLS 1.2"
(9) # Executing section authorize from file Freeradius/Conf/E_wpa2//sites-enabled/default
(9)   authorize {
(9)     policy filter_username {
(9)       if (&User-Name) {
(9)       if (&User-Name)  -> TRUE
(9)       if (&User-Name)  {
(9)         if (&User-Name =~ / /) {
(9)         if (&User-Name =~ / /)  -> FALSE
(9)         if (&User-Name =~ /@[^@]*@/ ) {
(9)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(9)         if (&User-Name =~ /\.\./ ) {
(9)         if (&User-Name =~ /\.\./ )  -> FALSE
(9)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(9)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(9)         if (&User-Name =~ /\.$/)  {
(9)         if (&User-Name =~ /\.$/)   -> FALSE
(9)         if (&User-Name =~ /@\./)  {
(9)         if (&User-Name =~ /@\./)   -> FALSE
(9)       } # if (&User-Name)  = notfound
(9)     } # policy filter_username = notfound
(9)     [preprocess] = ok
(9)     [chap] = noop
(9)     [mschap] = noop
(9)     [digest] = noop
(9) suffix: Checking for suffix after "@"
(9) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(9) suffix: No such realm "NULL"
(9)     [suffix] = noop
(9) eap: Peer sent EAP Response (code 2) ID 24 length 37
(9) eap: Continuing tunnel setup
(9)     [eap] = ok
(9)   } # authorize = ok
(9) Found Auth-Type = eap
(9) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(9)   authenticate {
(9) eap: Expiring EAP session with state 0x3d33d93a3c2bc301
(9) eap: Finished EAP session with state 0xe935f1d0e12de85d
(9) eap: Previous EAP request found for state 0xe935f1d0e12de85d, released from the list
(9) eap: Peer sent packet with method EAP PEAP (25)
(9) eap: Calling submodule eap_peap to process data
(9) eap_peap: (TLS) EAP Done initial handshake
(9) eap_peap: Session established.  Decoding tunneled attributes
(9) eap_peap: PEAP state phase2
(9) eap_peap: EAP method MSCHAPv2 (26)
(9) eap_peap: Got tunneled request
(9) eap_peap:   EAP-Message = 0x021800061a03
(9) eap_peap: Setting User-Name to bob@example.org
(9) eap_peap: Sending tunneled request to inner-tunnel
(9) eap_peap:   EAP-Message = 0x021800061a03
(9) eap_peap:   FreeRADIUS-Proxied-To = 127.0.0.1
(9) eap_peap:   User-Name = "bob@example.org"
(9) eap_peap:   State = 0x3d33d93a3c2bc3014af44b9fcf333724
(9) Virtual server inner-tunnel received request
(9)   EAP-Message = 0x021800061a03
(9)   FreeRADIUS-Proxied-To = 127.0.0.1
(9)   User-Name = "bob@example.org"
(9)   State = 0x3d33d93a3c2bc3014af44b9fcf333724
(9) WARNING: Outer User-Name is not anonymized.  User privacy is compromised.
(9) server inner-tunnel {
(9)   session-state: No cached attributes
(9)   # Executing section authorize from file Freeradius/Conf/E_wpa2//sites-enabled/inner-tunnel
(9)     authorize {
(9)       policy filter_username {
(9)         if (&User-Name) {
(9)         if (&User-Name)  -> TRUE
(9)         if (&User-Name)  {
(9)           if (&User-Name =~ / /) {
(9)           if (&User-Name =~ / /)  -> FALSE
(9)           if (&User-Name =~ /@[^@]*@/ ) {
(9)           if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(9)           if (&User-Name =~ /\.\./ ) {
(9)           if (&User-Name =~ /\.\./ )  -> FALSE
(9)           if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(9)           if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(9)           if (&User-Name =~ /\.$/)  {
(9)           if (&User-Name =~ /\.$/)   -> FALSE
(9)           if (&User-Name =~ /@\./)  {
(9)           if (&User-Name =~ /@\./)   -> FALSE
(9)         } # if (&User-Name)  = notfound
(9)       } # policy filter_username = notfound
(9)       [chap] = noop
(9)       [mschap] = noop
(9) suffix: Checking for suffix after "@"
(9) suffix: Looking up realm "example.org" for User-Name = "bob@example.org"
(9) suffix: No such realm "example.org"
(9)       [suffix] = noop
(9)       update control {
(9)         &Proxy-To-Realm := LOCAL
(9)       } # update control = noop
(9) eap: Peer sent EAP Response (code 2) ID 24 length 6
(9) eap: No EAP Start, assuming it's an on-going EAP conversation
(9)       [eap] = updated
(9) files: users: Matched entry bob@example.org at line 1
(9) files: EXPAND Hello, %{User-Name}
(9) files:    --> Hello, bob@example.org
(9)       [files] = ok
(9)       [expiration] = noop
(9)       [logintime] = noop
(9) pap: WARNING: Auth-Type already set.  Not setting to PAP
(9)       [pap] = noop
(9)     } # authorize = updated
(9)   Found Auth-Type = eap
(9)   # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/inner-tunnel
(9)     authenticate {
(9) eap: Expiring EAP session with state 0x3d33d93a3c2bc301
(9) eap: Finished EAP session with state 0x3d33d93a3c2bc301
(9) eap: Previous EAP request found for state 0x3d33d93a3c2bc301, released from the list
(9) eap: Peer sent packet with method EAP MSCHAPv2 (26)
(9) eap: Calling submodule eap_mschapv2 to process data
(9) eap: Sending EAP Success (code 3) ID 24 length 4
(9) eap: Freeing handler
(9)       [eap] = ok
(9)     } # authenticate = ok
(9)   # Executing section post-auth from file Freeradius/Conf/E_wpa2//sites-enabled/inner-tunnel
(9)     post-auth {
(9)       if (0) {
(9)       if (0)  -> FALSE
(9)     } # post-auth = noop
(9) } # server inner-tunnel
(9) Virtual server sending reply
(9)   Reply-Message = "Hello, bob@example.org"
(9)   MS-MPPE-Encryption-Policy = Encryption-Allowed
(9)   MS-MPPE-Encryption-Types = RC4-40or128-bit-Allowed
(9)   MS-MPPE-Send-Key = 0x92f64f43ab0176d563c7eae0339529c1
(9)   MS-MPPE-Recv-Key = 0x454db8b34e529fa6067a49d73a3aedd2
(9)   EAP-Message = 0x03180004
(9)   Message-Authenticator = 0x00000000000000000000000000000000
(9)   User-Name = "bob@example.org"
(9) eap_peap: Got tunneled reply code 2
(9) eap_peap:   Reply-Message = "Hello, bob@example.org"
(9) eap_peap:   MS-MPPE-Encryption-Policy = Encryption-Allowed
(9) eap_peap:   MS-MPPE-Encryption-Types = RC4-40or128-bit-Allowed
(9) eap_peap:   MS-MPPE-Send-Key = 0x92f64f43ab0176d563c7eae0339529c1
(9) eap_peap:   MS-MPPE-Recv-Key = 0x454db8b34e529fa6067a49d73a3aedd2
(9) eap_peap:   EAP-Message = 0x03180004
(9) eap_peap:   Message-Authenticator = 0x00000000000000000000000000000000
(9) eap_peap:   User-Name = "bob@example.org"
(9) eap_peap: Got tunneled reply RADIUS code 2
(9) eap_peap:   Reply-Message = "Hello, bob@example.org"
(9) eap_peap:   MS-MPPE-Encryption-Policy = Encryption-Allowed
(9) eap_peap:   MS-MPPE-Encryption-Types = RC4-40or128-bit-Allowed
(9) eap_peap:   MS-MPPE-Send-Key = 0x92f64f43ab0176d563c7eae0339529c1
(9) eap_peap:   MS-MPPE-Recv-Key = 0x454db8b34e529fa6067a49d73a3aedd2
(9) eap_peap:   EAP-Message = 0x03180004
(9) eap_peap:   Message-Authenticator = 0x00000000000000000000000000000000
(9) eap_peap:   User-Name = "bob@example.org"
(9) eap_peap: Tunneled authentication was successful
(9) eap_peap: SUCCESS
(9) eap: Sending EAP Request (code 1) ID 25 length 46
(9) eap: EAP session adding &reply:State = 0xe935f1d0e02ce85d
(9)     [eap] = handled
(9)   } # authenticate = handled
(9) Using Post-Auth-Type Challenge
(9) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(9)   Challenge { ... } # empty sub-section is ignored
(9) session-state: Saving cached attributes
(9)   Framed-MTU = 994
(9)   TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(9)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(9)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(9)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(9)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(9)   TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, ClientKeyExchange"
(9)   TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, Finished"
(9)   TLS-Session-Information = "(TLS) send TLS 1.2 ChangeCipherSpec"
(9)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Finished"
(9)   TLS-Session-Cipher-Suite = "ECDHE-RSA-AES256-GCM-SHA384"
(9)   TLS-Session-Version = "TLS 1.2"
(9) Sent Access-Challenge Id 9 from 127.0.0.1:1812 to 127.0.0.1:36150 length 104
(9)   EAP-Message = 0x0119002e19001703030023adf5b3d1d7541c8cadf04a09ce2e2f66b95a5ce02174a0cf3888cecc3de0150825a3d1
(9)   Message-Authenticator = 0x00000000000000000000000000000000
(9)   State = 0xe935f1d0e02ce85d92f4a928e79ea9f6
(9) Finished request
Waking up in 4.6 seconds.
(10) Received Access-Request Id 10 from 127.0.0.1:36150 to 127.0.0.1:1812 length 276
(10)   User-Name = "wiced"
(10)   NAS-IP-Address = 127.0.0.1
(10)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(10)   NAS-Port-Type = Wireless-802.11
(10)   Service-Type = Framed-User
(10)   NAS-Port = 1
(10)   Calling-Station-Id = "D4-53-83-BE-23-62"
(10)   Connect-Info = "CONNECT 54Mbps 802.11g"
(10)   Acct-Session-Id = "3E3D94C523705EF6"
(10)   Acct-Multi-Session-Id = "6AA29C8D2F2A27C8"
(10)   WLAN-Pairwise-Cipher = 1027076
(10)   WLAN-Group-Cipher = 1027076
(10)   WLAN-AKM-Suite = 1027073
(10)   WLAN-Group-Mgmt-Cipher = 1027078
(10)   Framed-MTU = 1400
(10)   EAP-Message = 0x0219002e19001703030023000000000000000494d96fac62a8c92222bf47370018833c27355316e471bd17e73797
(10)   State = 0xe935f1d0e02ce85d92f4a928e79ea9f6
(10)   Message-Authenticator = 0xa248dc3dd28d7341faa62d55f2c21de1
(10) Restoring &session-state
(10)   &session-state:Framed-MTU = 994
(10)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(10)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(10)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(10)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(10)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(10)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, ClientKeyExchange"
(10)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.2 Handshake, Finished"
(10)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 ChangeCipherSpec"
(10)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Finished"
(10)   &session-state:TLS-Session-Cipher-Suite = "ECDHE-RSA-AES256-GCM-SHA384"
(10)   &session-state:TLS-Session-Version = "TLS 1.2"
(10) # Executing section authorize from file Freeradius/Conf/E_wpa2//sites-enabled/default
(10)   authorize {
(10)     policy filter_username {
(10)       if (&User-Name) {
(10)       if (&User-Name)  -> TRUE
(10)       if (&User-Name)  {
(10)         if (&User-Name =~ / /) {
(10)         if (&User-Name =~ / /)  -> FALSE
(10)         if (&User-Name =~ /@[^@]*@/ ) {
(10)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(10)         if (&User-Name =~ /\.\./ ) {
(10)         if (&User-Name =~ /\.\./ )  -> FALSE
(10)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(10)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(10)         if (&User-Name =~ /\.$/)  {
(10)         if (&User-Name =~ /\.$/)   -> FALSE
(10)         if (&User-Name =~ /@\./)  {
(10)         if (&User-Name =~ /@\./)   -> FALSE
(10)       } # if (&User-Name)  = notfound
(10)     } # policy filter_username = notfound
(10)     [preprocess] = ok
(10)     [chap] = noop
(10)     [mschap] = noop
(10)     [digest] = noop
(10) suffix: Checking for suffix after "@"
(10) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(10) suffix: No such realm "NULL"
(10)     [suffix] = noop
(10) eap: Peer sent EAP Response (code 2) ID 25 length 46
(10) eap: Continuing tunnel setup
(10)     [eap] = ok
(10)   } # authorize = ok
(10) Found Auth-Type = eap
(10) # Executing group from file Freeradius/Conf/E_wpa2//sites-enabled/default
(10)   authenticate {
(10) eap: Expiring EAP session with state 0xe935f1d0e02ce85d
(10) eap: Finished EAP session with state 0xe935f1d0e02ce85d
(10) eap: Previous EAP request found for state 0xe935f1d0e02ce85d, released from the list
(10) eap: Peer sent packet with method EAP PEAP (25)
(10) eap: Calling submodule eap_peap to process data
(10) eap_peap: (TLS) EAP Done initial handshake
(10) eap_peap: Session established.  Decoding tunneled attributes
(10) eap_peap: PEAP state send tlv success
(10) eap_peap: Received EAP-TLV response
(10) eap_peap: Success
(10) eap: Sending EAP Success (code 3) ID 25 length 4
(10) eap: Freeing handler
(10)     [eap] = ok
(10)   } # authenticate = ok
(10) # Executing section post-auth from file Freeradius/Conf/E_wpa2//sites-enabled/default
(10)   post-auth {
(10)     if (session-state:User-Name && reply:User-Name && request:User-Name && (reply:User-Name == request:User-Name)) {
(10)     if (session-state:User-Name && reply:User-Name && request:User-Name && (reply:User-Name == request:User-Name))  -> FALSE
(10)     update {
(10)       &reply::Framed-MTU += &session-state:Framed-MTU[*] -> 994
(10)       &reply::TLS-Session-Information += &session-state:TLS-Session-Information[*] -> '(TLS) recv TLS 1.3 Handshake, ClientHello'
(10)       &reply::TLS-Session-Information += &session-state:TLS-Session-Information[*] -> '(TLS) send TLS 1.2 Handshake, ServerHello'
(10)       &reply::TLS-Session-Information += &session-state:TLS-Session-Information[*] -> '(TLS) send TLS 1.2 Handshake, Certificate'
(10)       &reply::TLS-Session-Information += &session-state:TLS-Session-Information[*] -> '(TLS) send TLS 1.2 Handshake, ServerKeyExchange'
(10)       &reply::TLS-Session-Information += &session-state:TLS-Session-Information[*] -> '(TLS) send TLS 1.2 Handshake, ServerHelloDone'
(10)       &reply::TLS-Session-Information += &session-state:TLS-Session-Information[*] -> '(TLS) recv TLS 1.2 Handshake, ClientKeyExchange'
(10)       &reply::TLS-Session-Information += &session-state:TLS-Session-Information[*] -> '(TLS) recv TLS 1.2 Handshake, Finished'
(10)       &reply::TLS-Session-Information += &session-state:TLS-Session-Information[*] -> '(TLS) send TLS 1.2 ChangeCipherSpec'
(10)       &reply::TLS-Session-Information += &session-state:TLS-Session-Information[*] -> '(TLS) send TLS 1.2 Handshake, Finished'
(10)       &reply::TLS-Session-Cipher-Suite += &session-state:TLS-Session-Cipher-Suite[*] -> 'ECDHE-RSA-AES256-GCM-SHA384'
(10)       &reply::TLS-Session-Version += &session-state:TLS-Session-Version[*] -> 'TLS 1.2'
(10)     } # update = noop
(10)     [exec] = noop
(10)     policy remove_reply_message_if_eap {
(10)       if (&reply:EAP-Message && &reply:Reply-Message) {
(10)       if (&reply:EAP-Message && &reply:Reply-Message)  -> FALSE
(10)       else {
(10)         [noop] = noop
(10)       } # else = noop
(10)     } # policy remove_reply_message_if_eap = noop
(10)     if (EAP-Key-Name && &reply:EAP-Session-Id) {
(10)     if (EAP-Key-Name && &reply:EAP-Session-Id)  -> FALSE
(10)   } # post-auth = noop
(10) Sent Access-Accept Id 10 from 127.0.0.1:1812 to 127.0.0.1:36150 length 173
(10)   MS-MPPE-Recv-Key = 0x2af4f36fad833e5622c94de4e7b116cf1f4f7fbc9b5f4450db71041fbd38967d
(10)   MS-MPPE-Send-Key = 0x277964fc9d7660c2c30f68bf08a6d35d3360acd998d09b98506768428c1e617c
(10)   EAP-Message = 0x03190004
(10)   Message-Authenticator = 0x00000000000000000000000000000000
(10)   User-Name = "wiced"
(10)   Framed-MTU += 994
(10) Finished request
Waking up in 4.6 seconds.
(0) Cleaning up request packet ID 0 with timestamp +996 due to cleanup_delay was reached
(1) Cleaning up request packet ID 1 with timestamp +996 due to cleanup_delay was reached
(2) Cleaning up request packet ID 2 with timestamp +996 due to cleanup_delay was reached
(3) Cleaning up request packet ID 3 with timestamp +996 due to cleanup_delay was reached
(4) Cleaning up request packet ID 4 with timestamp +996 due to cleanup_delay was reached
Waking up in 0.2 seconds.
(5) Cleaning up request packet ID 5 with timestamp +997 due to cleanup_delay was reached
(6) Cleaning up request packet ID 6 with timestamp +997 due to cleanup_delay was reached
(7) Cleaning up request packet ID 7 with timestamp +997 due to cleanup_delay was reached
(8) Cleaning up request packet ID 8 with timestamp +997 due to cleanup_delay was reached
(9) Cleaning up request packet ID 9 with timestamp +997 due to cleanup_delay was reached
(10) Cleaning up request packet ID 10 with timestamp +997 due to cleanup_delay was reached
Ready to process requests
Ready to process requests
Signalled to terminate
Exiting normally

[0;36mFreeRADIUS is stopped.[0m


[17:05:23.562] Beginning saving session of stdout and stderr Test/Tmp/Log/Cypress_board/e_rogue_wpa2...
[0;32mSuccess.[0m

[17:05:23.563] Fetching configuration directory associated to e_rogue_wpa2...
[0;32mSuccess.[0m

[17:05:23.581] Looking for Freeradius/Conf/E_rogue_wpa2/...
[0;32mSuccess.[0m

[0;36mRunning FreeRADIUS. Press Ctrl-C to stop.[0m

FreeRADIUS Version 3.0.26
Copyright (C) 1999-2021 The FreeRADIUS server project and contributors
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE
You may redistribute copies of FreeRADIUS under the terms of the
GNU General Public License
For more information about these matters, see the file named COPYRIGHT
Starting - reading configuration files ...
including dictionary file /usr/share/freeradius/dictionary
including dictionary file /usr/share/freeradius/dictionary.dhcp
including dictionary file /usr/share/freeradius/dictionary.vqp
including dictionary file Freeradius/Conf/E_rogue_wpa2//dictionary
including configuration file Freeradius/Conf/E_rogue_wpa2//radiusd.conf
including configuration file Freeradius/Conf/E_rogue_wpa2//proxy.conf
including configuration file Freeradius/Conf/E_rogue_wpa2//clients.conf
including files in directory Freeradius/Conf/E_rogue_wpa2//mods-enabled/
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/files
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/passwd
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/expr
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/soh
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/digest
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/dynamic_clients
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/unix
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/echo
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/preprocess
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/replicate
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/pap
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/detail
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/cache_eap
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/mschap
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/eap
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/logintime
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/utf8
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/unpack
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/radutmp
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/expiration
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/chap
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/realm
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/sradutmp
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/attr_filter
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/ntlm_auth
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/detail.log
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/exec
including configuration file Freeradius/Conf/E_rogue_wpa2//mods-enabled/linelog
including files in directory Freeradius/Conf/E_rogue_wpa2//policy.d/
including configuration file Freeradius/Conf/E_rogue_wpa2//policy.d/operator-name
including configuration file Freeradius/Conf/E_rogue_wpa2//policy.d/dhcp
including configuration file Freeradius/Conf/E_rogue_wpa2//policy.d/rfc7542
including configuration file Freeradius/Conf/E_rogue_wpa2//policy.d/accounting
including configuration file Freeradius/Conf/E_rogue_wpa2//policy.d/filter
including configuration file Freeradius/Conf/E_rogue_wpa2//policy.d/cui
including configuration file Freeradius/Conf/E_rogue_wpa2//policy.d/moonshot-targeted-ids
including configuration file Freeradius/Conf/E_rogue_wpa2//policy.d/canonicalization
including configuration file Freeradius/Conf/E_rogue_wpa2//policy.d/eap
including configuration file Freeradius/Conf/E_rogue_wpa2//policy.d/control
including configuration file Freeradius/Conf/E_rogue_wpa2//policy.d/abfab-tr
including configuration file Freeradius/Conf/E_rogue_wpa2//policy.d/debug
including files in directory Freeradius/Conf/E_rogue_wpa2//sites-enabled/
including configuration file Freeradius/Conf/E_rogue_wpa2//sites-enabled/inner-tunnel
including configuration file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
main {
 security {
 	user = "freerad"
 	group = "freerad"
 	allow_core_dumps = no
 }
	name = "freeradius"
	prefix = "/usr"
	localstatedir = "/var"
	logdir = "/var/log/freeradius"
	run_dir = "/var/run/freeradius"
}
main {
	name = "freeradius"
	prefix = "/usr"
	localstatedir = "/var"
	sbindir = "/usr/sbin"
	logdir = "/var/log/freeradius"
	run_dir = "/var/run/freeradius"
	libdir = "/usr/lib/freeradius"
	radacctdir = "/var/log/freeradius/radacct"
	hostname_lookups = no
	max_request_time = 30
	cleanup_delay = 5
	max_requests = 16384
	postauth_client_lost = no
	pidfile = "/var/run/freeradius/freeradius.pid"
	checkrad = "/usr/sbin/checkrad"
	debug_level = 0
	proxy_requests = yes
 log {
 	stripped_names = no
 	auth = no
 	auth_badpass = no
 	auth_goodpass = no
 	colourise = yes
 	msg_denied = "You are already logged in - access denied"
 }
 resources {
 }
 security {
 	max_attributes = 200
 	reject_delay = 1.000000
 	status_server = yes
 }
}
radiusd: #### Loading Realms and Home Servers ####
 proxy server {
 	retry_delay = 5
 	retry_count = 3
 	default_fallback = no
 	dead_time = 120
 	wake_all_if_all_dead = no
 }
 home_server localhost {
 	ipaddr = 127.0.0.1
 	port = 1812
 	type = "auth"
 	secret = <<< secret >>>
 	response_window = 20.000000
 	response_timeouts = 1
 	max_outstanding = 65536
 	zombie_period = 40
 	status_check = "status-server"
 	ping_interval = 30
 	check_interval = 30
 	check_timeout = 4
 	num_answers_to_alive = 3
 	revive_interval = 120
  limit {
  	max_connections = 16
  	max_requests = 0
  	lifetime = 0
  	idle_timeout = 0
  }
  coa {
  	irt = 2
  	mrt = 16
  	mrc = 5
  	mrd = 30
  }
 }
 home_server_pool my_auth_failover {
	type = fail-over
	home_server = localhost
 }
 realm example.com {
	auth_pool = my_auth_failover
 }
 realm LOCAL {
 }
radiusd: #### Loading Clients ####
 client localhost {
 	ipaddr = 127.0.0.1
 	require_message_authenticator = no
 	secret = <<< secret >>>
 	nas_type = "other"
 	proto = "*"
  limit {
  	max_connections = 16
  	lifetime = 0
  	idle_timeout = 30
  }
 }
 client localhost_ipv6 {
 	ipv6addr = ::1
 	require_message_authenticator = no
 	secret = <<< secret >>>
  limit {
  	max_connections = 16
  	lifetime = 0
  	idle_timeout = 30
  }
 }
Debugger not attached
systemd watchdog is disabled
 # Creating Auth-Type = mschap
 # Creating Auth-Type = eap
 # Creating Auth-Type = PAP
 # Creating Auth-Type = CHAP
 # Creating Auth-Type = MS-CHAP
 # Creating Auth-Type = digest
 # Creating Autz-Type = New-TLS-Connection
radiusd: #### Instantiating modules ####
 modules {
  # Loaded module rlm_files
  # Loading module "files" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/files
  files {
  	filename = "Freeradius/Conf/E_rogue_wpa2//mods-config/files/authorize"
  	acctusersfile = "Freeradius/Conf/E_rogue_wpa2//mods-config/files/accounting"
  	preproxy_usersfile = "Freeradius/Conf/E_rogue_wpa2//mods-config/files/pre-proxy"
  }
  # Loaded module rlm_passwd
  # Loading module "etc_passwd" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/passwd
  passwd etc_passwd {
  	filename = "/etc/passwd"
  	format = "*User-Name:Crypt-Password:"
  	delimiter = ":"
  	ignore_nislike = no
  	ignore_empty = yes
  	allow_multiple_keys = no
  	hash_size = 100
  }
  # Loaded module rlm_expr
  # Loading module "expr" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/expr
  expr {
  	safe_characters = "@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_: /√§√©√∂√º√†√¢√¶√ß√®√©√™√´√Æ√Ø√¥≈ì√π√ª√ºa√ø√Ñ√â√ñ√ú√ü√Ä√Ç√Ü√á√à√â√ä√ã√é√è√î≈í√ô√õ√ú≈∏"
  }
  # Loaded module rlm_soh
  # Loading module "soh" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/soh
  soh {
  	dhcp = yes
  }
  # Loaded module rlm_digest
  # Loading module "digest" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/digest
  # Loaded module rlm_dynamic_clients
  # Loading module "dynamic_clients" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/dynamic_clients
  # Loaded module rlm_unix
  # Loading module "unix" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/unix
  unix {
  	radwtmp = "/var/log/freeradius/radwtmp"
  }
Creating attribute Unix-Group
  # Loaded module rlm_exec
  # Loading module "echo" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/echo
  exec echo {
  	wait = yes
  	program = "/bin/echo %{User-Name}"
  	input_pairs = "request"
  	output_pairs = "reply"
  	shell_escape = yes
  }
  # Loaded module rlm_preprocess
  # Loading module "preprocess" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/preprocess
  preprocess {
  	huntgroups = "Freeradius/Conf/E_rogue_wpa2//mods-config/preprocess/huntgroups"
  	hints = "Freeradius/Conf/E_rogue_wpa2//mods-config/preprocess/hints"
  	with_ascend_hack = no
  	ascend_channels_per_line = 23
  	with_ntdomain_hack = no
  	with_specialix_jetstream_hack = no
  	with_cisco_vsa_hack = no
  	with_alvarion_vsa_hack = no
  }
  # Loaded module rlm_replicate
  # Loading module "replicate" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/replicate
  # Loaded module rlm_pap
  # Loading module "pap" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/pap
  pap {
  	normalise = yes
  }
  # Loaded module rlm_always
  # Loading module "reject" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  always reject {
  	rcode = "reject"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "fail" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  always fail {
  	rcode = "fail"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "ok" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  always ok {
  	rcode = "ok"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "handled" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  always handled {
  	rcode = "handled"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "invalid" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  always invalid {
  	rcode = "invalid"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "userlock" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  always userlock {
  	rcode = "userlock"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "notfound" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  always notfound {
  	rcode = "notfound"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "noop" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  always noop {
  	rcode = "noop"
  	simulcount = 0
  	mpp = no
  }
  # Loading module "updated" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  always updated {
  	rcode = "updated"
  	simulcount = 0
  	mpp = no
  }
  # Loaded module rlm_detail
  # Loading module "detail" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/detail
  detail {
  	filename = "/var/log/freeradius/radacct/%{%{Packet-Src-IP-Address}:-%{Packet-Src-IPv6-Address}}/detail-%Y%m%d"
  	header = "%t"
  	permissions = 384
  	locking = no
  	escape_filenames = no
  	log_packet_header = no
  }
  # Loaded module rlm_cache
  # Loading module "cache_eap" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/cache_eap
  cache cache_eap {
  	driver = "rlm_cache_rbtree"
  	key = "%{%{control:State}:-%{%{reply:State}:-%{State}}}"
  	ttl = 15
  	max_entries = 0
  	epoch = 0
  	add_stats = no
  }
  # Loaded module rlm_mschap
  # Loading module "mschap" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/mschap
  mschap {
  	use_mppe = yes
  	require_encryption = no
  	require_strong = no
  	with_ntdomain_hack = yes
   passchange {
   }
  	allow_retry = yes
  	winbind_retry_with_normalised_username = no
  }
  # Loaded module rlm_eap
  # Loading module "eap" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/eap
  eap {
  	default_eap_type = "md5"
  	timer_expire = 60
  	ignore_unknown_eap_types = no
  	cisco_accounting_username_bug = no
  	max_sessions = 16384
  }
  # Loaded module rlm_logintime
  # Loading module "logintime" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/logintime
  logintime {
  	minimum_timeout = 60
  }
  # Loaded module rlm_utf8
  # Loading module "utf8" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/utf8
  # Loaded module rlm_unpack
  # Loading module "unpack" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/unpack
  # Loaded module rlm_radutmp
  # Loading module "radutmp" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/radutmp
  radutmp {
  	filename = "/var/log/freeradius/radutmp"
  	username = "%{User-Name}"
  	case_sensitive = yes
  	check_with_nas = yes
  	permissions = 384
  	caller_id = yes
  }
  # Loaded module rlm_expiration
  # Loading module "expiration" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/expiration
  # Loaded module rlm_chap
  # Loading module "chap" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/chap
  # Loaded module rlm_realm
  # Loading module "IPASS" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/realm
  realm IPASS {
  	format = "prefix"
  	delimiter = "/"
  	ignore_default = no
  	ignore_null = no
  }
  # Loading module "suffix" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/realm
  realm suffix {
  	format = "suffix"
  	delimiter = "@"
  	ignore_default = no
  	ignore_null = no
  }
  # Loading module "bangpath" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/realm
  realm bangpath {
  	format = "prefix"
  	delimiter = "!"
  	ignore_default = no
  	ignore_null = no
  }
  # Loading module "realmpercent" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/realm
  realm realmpercent {
  	format = "suffix"
  	delimiter = "%"
  	ignore_default = no
  	ignore_null = no
  }
  # Loading module "ntdomain" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/realm
  realm ntdomain {
  	format = "prefix"
  	delimiter = "\\"
  	ignore_default = no
  	ignore_null = no
  }
  # Loading module "sradutmp" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/sradutmp
  radutmp sradutmp {
  	filename = "/var/log/freeradius/sradutmp"
  	username = "%{User-Name}"
  	case_sensitive = yes
  	check_with_nas = yes
  	permissions = 420
  	caller_id = no
  }
  # Loaded module rlm_attr_filter
  # Loading module "attr_filter.post-proxy" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/attr_filter
  attr_filter attr_filter.post-proxy {
  	filename = "Freeradius/Conf/E_rogue_wpa2//mods-config/attr_filter/post-proxy"
  	key = "%{Realm}"
  	relaxed = no
  }
  # Loading module "attr_filter.pre-proxy" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/attr_filter
  attr_filter attr_filter.pre-proxy {
  	filename = "Freeradius/Conf/E_rogue_wpa2//mods-config/attr_filter/pre-proxy"
  	key = "%{Realm}"
  	relaxed = no
  }
  # Loading module "attr_filter.access_reject" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/attr_filter
  attr_filter attr_filter.access_reject {
  	filename = "Freeradius/Conf/E_rogue_wpa2//mods-config/attr_filter/access_reject"
  	key = "%{User-Name}"
  	relaxed = no
  }
  # Loading module "attr_filter.access_challenge" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/attr_filter
  attr_filter attr_filter.access_challenge {
  	filename = "Freeradius/Conf/E_rogue_wpa2//mods-config/attr_filter/access_challenge"
  	key = "%{User-Name}"
  	relaxed = no
  }
  # Loading module "attr_filter.accounting_response" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/attr_filter
  attr_filter attr_filter.accounting_response {
  	filename = "Freeradius/Conf/E_rogue_wpa2//mods-config/attr_filter/accounting_response"
  	key = "%{User-Name}"
  	relaxed = no
  }
  # Loading module "attr_filter.coa" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/attr_filter
  attr_filter attr_filter.coa {
  	filename = "Freeradius/Conf/E_rogue_wpa2//mods-config/attr_filter/coa"
  	key = "%{User-Name}"
  	relaxed = no
  }
  # Loading module "ntlm_auth" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/ntlm_auth
  exec ntlm_auth {
  	wait = yes
  	program = "/path/to/ntlm_auth --request-nt-key --domain=MYDOMAIN --username=%{mschap:User-Name} --password=%{User-Password}"
  	shell_escape = yes
  }
  # Loading module "auth_log" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/detail.log
  detail auth_log {
  	filename = "/var/log/freeradius/radacct/%{%{Packet-Src-IP-Address}:-%{Packet-Src-IPv6-Address}}/auth-detail-%Y%m%d"
  	header = "%t"
  	permissions = 384
  	locking = no
  	escape_filenames = no
  	log_packet_header = no
  }
  # Loading module "reply_log" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/detail.log
  detail reply_log {
  	filename = "/var/log/freeradius/radacct/%{%{Packet-Src-IP-Address}:-%{Packet-Src-IPv6-Address}}/reply-detail-%Y%m%d"
  	header = "%t"
  	permissions = 384
  	locking = no
  	escape_filenames = no
  	log_packet_header = no
  }
  # Loading module "pre_proxy_log" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/detail.log
  detail pre_proxy_log {
  	filename = "/var/log/freeradius/radacct/%{%{Packet-Src-IP-Address}:-%{Packet-Src-IPv6-Address}}/pre-proxy-detail-%Y%m%d"
  	header = "%t"
  	permissions = 384
  	locking = no
  	escape_filenames = no
  	log_packet_header = no
  }
  # Loading module "post_proxy_log" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/detail.log
  detail post_proxy_log {
  	filename = "/var/log/freeradius/radacct/%{%{Packet-Src-IP-Address}:-%{Packet-Src-IPv6-Address}}/post-proxy-detail-%Y%m%d"
  	header = "%t"
  	permissions = 384
  	locking = no
  	escape_filenames = no
  	log_packet_header = no
  }
  # Loading module "exec" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/exec
  exec {
  	wait = no
  	input_pairs = "request"
  	shell_escape = yes
  	timeout = 10
  }
  # Loaded module rlm_linelog
  # Loading module "linelog" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/linelog
  linelog {
  	filename = "/var/log/freeradius/linelog"
  	escape_filenames = no
  	syslog_severity = "info"
  	permissions = 384
  	format = "This is a log message for %{User-Name}"
  	reference = "messages.%{%{reply:Packet-Type}:-default}"
  }
  # Loading module "log_accounting" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/linelog
  linelog log_accounting {
  	filename = "/var/log/freeradius/linelog-accounting"
  	escape_filenames = no
  	syslog_severity = "info"
  	permissions = 384
  	format = ""
  	reference = "Accounting-Request.%{%{Acct-Status-Type}:-unknown}"
  }
  instantiate {
  }
  # Instantiating module "files" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/files
reading pairlist file Freeradius/Conf/E_rogue_wpa2//mods-config/files/authorize
reading pairlist file Freeradius/Conf/E_rogue_wpa2//mods-config/files/accounting
reading pairlist file Freeradius/Conf/E_rogue_wpa2//mods-config/files/pre-proxy
  # Instantiating module "etc_passwd" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/passwd
rlm_passwd: nfields: 3 keyfield 0(User-Name) listable: no
  # Instantiating module "preprocess" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/preprocess
reading pairlist file Freeradius/Conf/E_rogue_wpa2//mods-config/preprocess/huntgroups
reading pairlist file Freeradius/Conf/E_rogue_wpa2//mods-config/preprocess/hints
  # Instantiating module "pap" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/pap
  # Instantiating module "reject" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  # Instantiating module "fail" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  # Instantiating module "ok" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  # Instantiating module "handled" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  # Instantiating module "invalid" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  # Instantiating module "userlock" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  # Instantiating module "notfound" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  # Instantiating module "noop" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  # Instantiating module "updated" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/always
  # Instantiating module "detail" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/detail
  # Instantiating module "cache_eap" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/cache_eap
rlm_cache (cache_eap): Driver rlm_cache_rbtree (module rlm_cache_rbtree) loaded and linked
  # Instantiating module "mschap" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/mschap
rlm_mschap (mschap): using internal authentication
  # Instantiating module "eap" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/eap
   # Linked to sub-module rlm_eap_md5
   # Linked to sub-module rlm_eap_gtc
   gtc {
   	challenge = "Password: "
   	auth_type = "PAP"
   }
   # Linked to sub-module rlm_eap_tls
   tls {
   	tls = "tls-common"
   }
   tls-config tls-common {
   	verify_depth = 0
   	ca_path = "Freeradius/Conf/E_rogue_wpa2//certs"
   	pem_file_type = yes
   	private_key_file = "Freeradius/Conf/E_rogue_wpa2//certs/server.key"
   	certificate_file = "Freeradius/Conf/E_rogue_wpa2//certs/server.crt"
   	ca_file = "Freeradius/Conf/E_rogue_wpa2//certs/ca.pem"
   	private_key_password = <<< secret >>>
   	fragment_size = 1024
   	include_length = yes
   	auto_chain = yes
   	check_crl = no
   	check_all_crl = no
   	ca_path_reload_interval = 0
   	cipher_list = "DEFAULT"
   	cipher_server_preference = no
   	reject_unknown_intermediate_ca = no
   	ecdh_curve = ""
   	tls_max_version = "1.2"
   	tls_min_version = "1.2"
    cache {
    	enable = no
    	lifetime = 24
    	max_entries = 255
    }
    verify {
    	skip_if_ocsp_ok = no
    }
    ocsp {
    	enable = no
    	override_cert_url = yes
    	url = "http://127.0.0.1/ocsp/"
    	use_nonce = yes
    	timeout = 0
    	softfail = no
    }
   }
   # Linked to sub-module rlm_eap_ttls
   ttls {
   	tls = "tls-common"
   	default_eap_type = "md5"
   	copy_request_to_tunnel = no
   	use_tunneled_reply = no
   	virtual_server = "inner-tunnel"
   	include_length = yes
   	require_client_cert = no
   }
tls: Using cached TLS configuration from previous invocation
   # Linked to sub-module rlm_eap_peap
   peap {
   	tls = "tls-common"
   	default_eap_type = "mschapv2"
   	copy_request_to_tunnel = no
   	use_tunneled_reply = no
   	proxy_tunneled_request_as_eap = yes
   	virtual_server = "inner-tunnel"
   	soh = no
   	require_client_cert = no
   }
tls: Using cached TLS configuration from previous invocation
   # Linked to sub-module rlm_eap_mschapv2
   mschapv2 {
   	with_ntdomain_hack = no
   	send_error = no
   }
  # Instantiating module "logintime" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/logintime
  # Instantiating module "expiration" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/expiration
  # Instantiating module "IPASS" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/realm
  # Instantiating module "suffix" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/realm
  # Instantiating module "bangpath" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/realm
  # Instantiating module "realmpercent" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/realm
  # Instantiating module "ntdomain" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/realm
  # Instantiating module "attr_filter.post-proxy" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/attr_filter
reading pairlist file Freeradius/Conf/E_rogue_wpa2//mods-config/attr_filter/post-proxy
  # Instantiating module "attr_filter.pre-proxy" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/attr_filter
reading pairlist file Freeradius/Conf/E_rogue_wpa2//mods-config/attr_filter/pre-proxy
  # Instantiating module "attr_filter.access_reject" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/attr_filter
reading pairlist file Freeradius/Conf/E_rogue_wpa2//mods-config/attr_filter/access_reject
  # Instantiating module "attr_filter.access_challenge" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/attr_filter
reading pairlist file Freeradius/Conf/E_rogue_wpa2//mods-config/attr_filter/access_challenge
  # Instantiating module "attr_filter.accounting_response" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/attr_filter
reading pairlist file Freeradius/Conf/E_rogue_wpa2//mods-config/attr_filter/accounting_response
  # Instantiating module "attr_filter.coa" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/attr_filter
reading pairlist file Freeradius/Conf/E_rogue_wpa2//mods-config/attr_filter/coa
  # Instantiating module "auth_log" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/detail.log
rlm_detail (auth_log): 'User-Password' suppressed, will not appear in detail output
  # Instantiating module "reply_log" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/detail.log
  # Instantiating module "pre_proxy_log" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/detail.log
  # Instantiating module "post_proxy_log" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/detail.log
  # Instantiating module "linelog" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/linelog
  # Instantiating module "log_accounting" from file Freeradius/Conf/E_rogue_wpa2//mods-enabled/linelog
 } # modules
radiusd: #### Loading Virtual Servers ####
server { # from file Freeradius/Conf/E_rogue_wpa2//radiusd.conf
} # server
server inner-tunnel { # from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/inner-tunnel
 # Loading authenticate {...}
Compiling Auth-Type PAP for attr Auth-Type
Compiling Auth-Type CHAP for attr Auth-Type
Compiling Auth-Type MS-CHAP for attr Auth-Type
 # Loading authorize {...}
Ignoring "sql" (see raddb/mods-available/README.rst)
Ignoring "ldap" (see raddb/mods-available/README.rst)
 # Loading session {...}
 # Loading post-proxy {...}
 # Loading post-auth {...}
 # Skipping contents of 'if' as it is always 'false' -- Freeradius/Conf/E_rogue_wpa2//sites-enabled/inner-tunnel:336
Compiling Post-Auth-Type REJECT for attr Post-Auth-Type
} # server inner-tunnel
server default { # from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
 # Loading authenticate {...}
Compiling Auth-Type PAP for attr Auth-Type
Compiling Auth-Type CHAP for attr Auth-Type
Compiling Auth-Type MS-CHAP for attr Auth-Type
 # Loading authorize {...}
Compiling Autz-Type New-TLS-Connection for attr Autz-Type
 # Loading preacct {...}
 # Loading accounting {...}
 # Loading post-proxy {...}
 # Loading post-auth {...}
Compiling Post-Auth-Type REJECT for attr Post-Auth-Type
Compiling Post-Auth-Type Challenge for attr Post-Auth-Type
Compiling Post-Auth-Type Client-Lost for attr Post-Auth-Type
} # server default
radiusd: #### Opening IP addresses and Ports ####
listen {
  	type = "auth"
  	ipaddr = 127.0.0.1
  	port = 18120
}
listen {
  	type = "auth"
  	ipaddr = *
  	port = 0
   limit {
   	max_connections = 16
   	lifetime = 0
   	idle_timeout = 30
   }
}
listen {
  	type = "acct"
  	ipaddr = *
  	port = 0
   limit {
   	max_connections = 16
   	lifetime = 0
   	idle_timeout = 30
   }
}
listen {
  	type = "auth"
  	ipv6addr = ::
  	port = 0
   limit {
   	max_connections = 16
   	lifetime = 0
   	idle_timeout = 30
   }
}
listen {
  	type = "acct"
  	ipv6addr = ::
  	port = 0
   limit {
   	max_connections = 16
   	lifetime = 0
   	idle_timeout = 30
   }
}
Listening on auth address 127.0.0.1 port 18120 bound to server inner-tunnel
Listening on auth address * port 1812 bound to server default
Listening on acct address * port 1813 bound to server default
Listening on auth address :: port 1812 bound to server default
Listening on acct address :: port 1813 bound to server default
Listening on proxy address * port 39417
Listening on proxy address :: port 43277
Ready to process requests
(0) Received Access-Request Id 0 from 127.0.0.1:40953 to 127.0.0.1:1812 length 222
(0)   User-Name = "wiced"
(0)   NAS-IP-Address = 127.0.0.1
(0)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(0)   NAS-Port-Type = Wireless-802.11
(0)   Service-Type = Framed-User
(0)   NAS-Port = 1
(0)   Calling-Station-Id = "D4-53-83-BE-23-62"
(0)   Connect-Info = "CONNECT 54Mbps 802.11g"
(0)   Acct-Session-Id = "97327F62FA91CD56"
(0)   Acct-Multi-Session-Id = "DBA7FD1F816412D0"
(0)   WLAN-Pairwise-Cipher = 1027076
(0)   WLAN-Group-Cipher = 1027076
(0)   WLAN-AKM-Suite = 1027073
(0)   WLAN-Group-Mgmt-Cipher = 1027078
(0)   Framed-MTU = 1400
(0)   EAP-Message = 0x023d000a017769636564
(0)   Message-Authenticator = 0xec04715a3ea4854934d7a024eb8e6408
(0) # Executing section authorize from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(0)   authorize {
(0)     policy filter_username {
(0)       if (&User-Name) {
(0)       if (&User-Name)  -> TRUE
(0)       if (&User-Name)  {
(0)         if (&User-Name =~ / /) {
(0)         if (&User-Name =~ / /)  -> FALSE
(0)         if (&User-Name =~ /@[^@]*@/ ) {
(0)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(0)         if (&User-Name =~ /\.\./ ) {
(0)         if (&User-Name =~ /\.\./ )  -> FALSE
(0)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(0)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(0)         if (&User-Name =~ /\.$/)  {
(0)         if (&User-Name =~ /\.$/)   -> FALSE
(0)         if (&User-Name =~ /@\./)  {
(0)         if (&User-Name =~ /@\./)   -> FALSE
(0)       } # if (&User-Name)  = notfound
(0)     } # policy filter_username = notfound
(0)     [preprocess] = ok
(0)     [chap] = noop
(0)     [mschap] = noop
(0)     [digest] = noop
(0) suffix: Checking for suffix after "@"
(0) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(0) suffix: No such realm "NULL"
(0)     [suffix] = noop
(0) eap: Peer sent EAP Response (code 2) ID 61 length 10
(0) eap: EAP-Identity reply, returning 'ok' so we can short-circuit the rest of authorize
(0)     [eap] = ok
(0)   } # authorize = ok
(0) Found Auth-Type = eap
(0) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(0)   authenticate {
(0) eap: Peer sent packet with method EAP Identity (1)
(0) eap: Calling submodule eap_md5 to process data
(0) eap_md5: Issuing MD5 Challenge
(0) eap: Sending EAP Request (code 1) ID 62 length 22
(0) eap: EAP session adding &reply:State = 0xe5744758e54a43f0
(0)     [eap] = handled
(0)   } # authenticate = handled
(0) Using Post-Auth-Type Challenge
(0) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(0)   Challenge { ... } # empty sub-section is ignored
(0) Sent Access-Challenge Id 0 from 127.0.0.1:1812 to 127.0.0.1:40953 length 80
(0)   EAP-Message = 0x013e00160410f1ce9b63fa60ee0c1066de802ee20397
(0)   Message-Authenticator = 0x00000000000000000000000000000000
(0)   State = 0xe5744758e54a43f048882b2051d821b4
(0) Finished request
Waking up in 4.9 seconds.
(1) Received Access-Request Id 1 from 127.0.0.1:40953 to 127.0.0.1:1812 length 236
(1)   User-Name = "wiced"
(1)   NAS-IP-Address = 127.0.0.1
(1)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(1)   NAS-Port-Type = Wireless-802.11
(1)   Service-Type = Framed-User
(1)   NAS-Port = 1
(1)   Calling-Station-Id = "D4-53-83-BE-23-62"
(1)   Connect-Info = "CONNECT 54Mbps 802.11g"
(1)   Acct-Session-Id = "97327F62FA91CD56"
(1)   Acct-Multi-Session-Id = "DBA7FD1F816412D0"
(1)   WLAN-Pairwise-Cipher = 1027076
(1)   WLAN-Group-Cipher = 1027076
(1)   WLAN-AKM-Suite = 1027073
(1)   WLAN-Group-Mgmt-Cipher = 1027078
(1)   Framed-MTU = 1400
(1)   EAP-Message = 0x023e00060319
(1)   State = 0xe5744758e54a43f048882b2051d821b4
(1)   Message-Authenticator = 0xfa31648ab3e37a6964c7727ca9c17926
(1) session-state: No cached attributes
(1) # Executing section authorize from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(1)   authorize {
(1)     policy filter_username {
(1)       if (&User-Name) {
(1)       if (&User-Name)  -> TRUE
(1)       if (&User-Name)  {
(1)         if (&User-Name =~ / /) {
(1)         if (&User-Name =~ / /)  -> FALSE
(1)         if (&User-Name =~ /@[^@]*@/ ) {
(1)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(1)         if (&User-Name =~ /\.\./ ) {
(1)         if (&User-Name =~ /\.\./ )  -> FALSE
(1)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(1)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(1)         if (&User-Name =~ /\.$/)  {
(1)         if (&User-Name =~ /\.$/)   -> FALSE
(1)         if (&User-Name =~ /@\./)  {
(1)         if (&User-Name =~ /@\./)   -> FALSE
(1)       } # if (&User-Name)  = notfound
(1)     } # policy filter_username = notfound
(1)     [preprocess] = ok
(1)     [chap] = noop
(1)     [mschap] = noop
(1)     [digest] = noop
(1) suffix: Checking for suffix after "@"
(1) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(1) suffix: No such realm "NULL"
(1)     [suffix] = noop
(1) eap: Peer sent EAP Response (code 2) ID 62 length 6
(1) eap: No EAP Start, assuming it's an on-going EAP conversation
(1)     [eap] = updated
(1)     [files] = noop
(1)     [expiration] = noop
(1)     [logintime] = noop
Not doing PAP as Auth-Type is already set.
(1)     [pap] = noop
(1)   } # authorize = updated
(1) Found Auth-Type = eap
(1) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(1)   authenticate {
(1) eap: Expiring EAP session with state 0xe5744758e54a43f0
(1) eap: Finished EAP session with state 0xe5744758e54a43f0
(1) eap: Previous EAP request found for state 0xe5744758e54a43f0, released from the list
(1) eap: Peer sent packet with method EAP NAK (3)
(1) eap: Found mutually acceptable type PEAP (25)
(1) eap: Calling submodule eap_peap to process data
(1) eap_peap: (TLS) Initiating new session
(1) eap: Sending EAP Request (code 1) ID 63 length 6
(1) eap: EAP session adding &reply:State = 0xe5744758e44b5ef0
(1)     [eap] = handled
(1)   } # authenticate = handled
(1) Using Post-Auth-Type Challenge
(1) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(1)   Challenge { ... } # empty sub-section is ignored
(1) session-state: Saving cached attributes
(1)   Framed-MTU = 994
(1) Sent Access-Challenge Id 1 from 127.0.0.1:1812 to 127.0.0.1:40953 length 64
(1)   EAP-Message = 0x013f00061920
(1)   Message-Authenticator = 0x00000000000000000000000000000000
(1)   State = 0xe5744758e44b5ef048882b2051d821b4
(1) Finished request
Waking up in 4.9 seconds.
(2) Received Access-Request Id 2 from 127.0.0.1:40953 to 127.0.0.1:1812 length 406
(2)   User-Name = "wiced"
(2)   NAS-IP-Address = 127.0.0.1
(2)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(2)   NAS-Port-Type = Wireless-802.11
(2)   Service-Type = Framed-User
(2)   NAS-Port = 1
(2)   Calling-Station-Id = "D4-53-83-BE-23-62"
(2)   Connect-Info = "CONNECT 54Mbps 802.11g"
(2)   Acct-Session-Id = "97327F62FA91CD56"
(2)   Acct-Multi-Session-Id = "DBA7FD1F816412D0"
(2)   WLAN-Pairwise-Cipher = 1027076
(2)   WLAN-Group-Cipher = 1027076
(2)   WLAN-AKM-Suite = 1027073
(2)   WLAN-Group-Mgmt-Cipher = 1027078
(2)   Framed-MTU = 1400
(2)   EAP-Message = 0x023f00b01980000000a616030100a10100009d0303000004002bcbcbbdae1aa5489617e8cacb96e4b62f7c05ca5d9633f3e5881a5600003ac030c0aec0a8006b00c400390088006700be00330045c02cc02bc0afc023c009c00ac004c005c02f003d00c000350084003c00ba002f004100ff0100003a000d001600140603060105030501040304010303030102030201000a000e000c001800170016001a00150013000b000201000016000000170000
(2)   State = 0xe5744758e44b5ef048882b2051d821b4
(2)   Message-Authenticator = 0x7f94dfa4eb3180ff40e06434232330bc
(2) Restoring &session-state
(2)   &session-state:Framed-MTU = 994
(2) # Executing section authorize from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(2)   authorize {
(2)     policy filter_username {
(2)       if (&User-Name) {
(2)       if (&User-Name)  -> TRUE
(2)       if (&User-Name)  {
(2)         if (&User-Name =~ / /) {
(2)         if (&User-Name =~ / /)  -> FALSE
(2)         if (&User-Name =~ /@[^@]*@/ ) {
(2)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(2)         if (&User-Name =~ /\.\./ ) {
(2)         if (&User-Name =~ /\.\./ )  -> FALSE
(2)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(2)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(2)         if (&User-Name =~ /\.$/)  {
(2)         if (&User-Name =~ /\.$/)   -> FALSE
(2)         if (&User-Name =~ /@\./)  {
(2)         if (&User-Name =~ /@\./)   -> FALSE
(2)       } # if (&User-Name)  = notfound
(2)     } # policy filter_username = notfound
(2)     [preprocess] = ok
(2)     [chap] = noop
(2)     [mschap] = noop
(2)     [digest] = noop
(2) suffix: Checking for suffix after "@"
(2) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(2) suffix: No such realm "NULL"
(2)     [suffix] = noop
(2) eap: Peer sent EAP Response (code 2) ID 63 length 176
(2) eap: Continuing tunnel setup
(2)     [eap] = ok
(2)   } # authorize = ok
(2) Found Auth-Type = eap
(2) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(2)   authenticate {
(2) eap: Expiring EAP session with state 0xe5744758e44b5ef0
(2) eap: Finished EAP session with state 0xe5744758e44b5ef0
(2) eap: Previous EAP request found for state 0xe5744758e44b5ef0, released from the list
(2) eap: Peer sent packet with method EAP PEAP (25)
(2) eap: Calling submodule eap_peap to process data
(2) eap_peap: (TLS) EAP Peer says that the final record size will be 166 bytes
(2) eap_peap: (TLS) EAP Got all data (166 bytes)
(2) eap_peap: (TLS) Handshake state - before SSL initialization
(2) eap_peap: (TLS) Handshake state - Server before SSL initialization
(2) eap_peap: (TLS) Handshake state - Server before SSL initialization
(2) eap_peap: (TLS) recv TLS 1.3 Handshake, ClientHello
(2) eap_peap: (TLS) Handshake state - Server SSLv3/TLS read client hello
(2) eap_peap: (TLS) send TLS 1.2 Handshake, ServerHello
(2) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write server hello
(2) eap_peap: (TLS) send TLS 1.2 Handshake, Certificate
(2) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write certificate
(2) eap_peap: (TLS) send TLS 1.2 Handshake, ServerKeyExchange
(2) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write key exchange
(2) eap_peap: (TLS) send TLS 1.2 Handshake, ServerHelloDone
(2) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write server done
(2) eap_peap: (TLS) Server : Need to read more data: SSLv3/TLS write server done
(2) eap_peap: (TLS) In Handshake Phase
(2) eap: Sending EAP Request (code 1) ID 64 length 1004
(2) eap: EAP session adding &reply:State = 0xe5744758e7345ef0
(2)     [eap] = handled
(2)   } # authenticate = handled
(2) Using Post-Auth-Type Challenge
(2) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(2)   Challenge { ... } # empty sub-section is ignored
(2) session-state: Saving cached attributes
(2)   Framed-MTU = 994
(2)   TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(2)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(2)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(2)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(2)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(2) Sent Access-Challenge Id 2 from 127.0.0.1:1812 to 127.0.0.1:40953 length 1068
(2)   EAP-Message = 0x014003ec19c000000aed160303003d02000039030324ac31853d348ae57e0d03aac8fa798dea5bfeedb46597df0f0088978898af2300c030000011ff01000100000b00040300010200170000160303092b0b0009270009240004203082041c30820304a003020102020101300d06092a864886f70d01010b0500308193310b3009060355040613024652310f300d06035504080c065261646975733112301006035504070c09536f6d65776865726531153013060355040a0c0c4578616d706c6520496e632e3120301e06092a864886f70d010901161161646d696e406578616d706c652e6f72673126302406035504030c1d4578616d706c6520436572746966696361746520417574686f72697479301e170d3233313232303134333732315a170d3234303231383134333732315a307c310b3009060355040613024652310f300d06035504080c0652616469757331153013060355040a0c0c4578616d706c6520496e632e3123302106035504030c1a4578616d70
(2)   Message-Authenticator = 0x00000000000000000000000000000000
(2)   State = 0xe5744758e7345ef048882b2051d821b4
(2) Finished request
Waking up in 4.9 seconds.
(3) Received Access-Request Id 3 from 127.0.0.1:40953 to 127.0.0.1:1812 length 236
(3)   User-Name = "wiced"
(3)   NAS-IP-Address = 127.0.0.1
(3)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(3)   NAS-Port-Type = Wireless-802.11
(3)   Service-Type = Framed-User
(3)   NAS-Port = 1
(3)   Calling-Station-Id = "D4-53-83-BE-23-62"
(3)   Connect-Info = "CONNECT 54Mbps 802.11g"
(3)   Acct-Session-Id = "97327F62FA91CD56"
(3)   Acct-Multi-Session-Id = "DBA7FD1F816412D0"
(3)   WLAN-Pairwise-Cipher = 1027076
(3)   WLAN-Group-Cipher = 1027076
(3)   WLAN-AKM-Suite = 1027073
(3)   WLAN-Group-Mgmt-Cipher = 1027078
(3)   Framed-MTU = 1400
(3)   EAP-Message = 0x024000061900
(3)   State = 0xe5744758e7345ef048882b2051d821b4
(3)   Message-Authenticator = 0x77919d770fc5caf5bae057d6e82bb0b6
(3) Restoring &session-state
(3)   &session-state:Framed-MTU = 994
(3)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(3)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(3)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(3)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(3)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(3) # Executing section authorize from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(3)   authorize {
(3)     policy filter_username {
(3)       if (&User-Name) {
(3)       if (&User-Name)  -> TRUE
(3)       if (&User-Name)  {
(3)         if (&User-Name =~ / /) {
(3)         if (&User-Name =~ / /)  -> FALSE
(3)         if (&User-Name =~ /@[^@]*@/ ) {
(3)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(3)         if (&User-Name =~ /\.\./ ) {
(3)         if (&User-Name =~ /\.\./ )  -> FALSE
(3)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(3)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(3)         if (&User-Name =~ /\.$/)  {
(3)         if (&User-Name =~ /\.$/)   -> FALSE
(3)         if (&User-Name =~ /@\./)  {
(3)         if (&User-Name =~ /@\./)   -> FALSE
(3)       } # if (&User-Name)  = notfound
(3)     } # policy filter_username = notfound
(3)     [preprocess] = ok
(3)     [chap] = noop
(3)     [mschap] = noop
(3)     [digest] = noop
(3) suffix: Checking for suffix after "@"
(3) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(3) suffix: No such realm "NULL"
(3)     [suffix] = noop
(3) eap: Peer sent EAP Response (code 2) ID 64 length 6
(3) eap: Continuing tunnel setup
(3)     [eap] = ok
(3)   } # authorize = ok
(3) Found Auth-Type = eap
(3) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(3)   authenticate {
(3) eap: Expiring EAP session with state 0xe5744758e7345ef0
(3) eap: Finished EAP session with state 0xe5744758e7345ef0
(3) eap: Previous EAP request found for state 0xe5744758e7345ef0, released from the list
(3) eap: Peer sent packet with method EAP PEAP (25)
(3) eap: Calling submodule eap_peap to process data
(3) eap_peap: (TLS) Peer ACKed our handshake fragment
(3) eap: Sending EAP Request (code 1) ID 65 length 1000
(3) eap: EAP session adding &reply:State = 0xe5744758e6355ef0
(3)     [eap] = handled
(3)   } # authenticate = handled
(3) Using Post-Auth-Type Challenge
(3) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(3)   Challenge { ... } # empty sub-section is ignored
(3) session-state: Saving cached attributes
(3)   Framed-MTU = 994
(3)   TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(3)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(3)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(3)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(3)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(3) Sent Access-Challenge Id 3 from 127.0.0.1:1812 to 127.0.0.1:40953 length 1064
(3)   EAP-Message = 0x014103e81940b365595edec634be72466f496c8cad448e057893222e9d9b96fa51c2d84df387dace2b8dd56e85ea1e27ed302547bc22a35b0349ae7075502f1be4a933467c7ec41b12f969f65caf80e82b77b04c1d46756210be2684f027b347debb97d3bca395775660fe2168969187b5d46b43284bb130757803bdfe082cbf44b37353c4f853131bace8ca9c30290a88b1bf0a680004fe308204fa308203e2a003020102021457604ee8762089eef125d540c0bbf0b5a118a4af300d06092a864886f70d01010b0500308193310b3009060355040613024652310f300d06035504080c065261646975733112301006035504070c09536f6d65776865726531153013060355040a0c0c4578616d706c6520496e632e3120301e06092a864886f70d010901161161646d696e406578616d706c652e6f72673126302406035504030c1d4578616d706c6520436572746966696361746520417574686f72697479301e170d3233313232303134333731355a170d32343032
(3)   Message-Authenticator = 0x00000000000000000000000000000000
(3)   State = 0xe5744758e6355ef048882b2051d821b4
(3) Finished request
Waking up in 4.9 seconds.
(4) Received Access-Request Id 4 from 127.0.0.1:40953 to 127.0.0.1:1812 length 236
(4)   User-Name = "wiced"
(4)   NAS-IP-Address = 127.0.0.1
(4)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(4)   NAS-Port-Type = Wireless-802.11
(4)   Service-Type = Framed-User
(4)   NAS-Port = 1
(4)   Calling-Station-Id = "D4-53-83-BE-23-62"
(4)   Connect-Info = "CONNECT 54Mbps 802.11g"
(4)   Acct-Session-Id = "97327F62FA91CD56"
(4)   Acct-Multi-Session-Id = "DBA7FD1F816412D0"
(4)   WLAN-Pairwise-Cipher = 1027076
(4)   WLAN-Group-Cipher = 1027076
(4)   WLAN-AKM-Suite = 1027073
(4)   WLAN-Group-Mgmt-Cipher = 1027078
(4)   Framed-MTU = 1400
(4)   EAP-Message = 0x024100061900
(4)   State = 0xe5744758e6355ef048882b2051d821b4
(4)   Message-Authenticator = 0xbf53737e9d09c8a96298551604795ea6
(4) Restoring &session-state
(4)   &session-state:Framed-MTU = 994
(4)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(4)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(4)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(4)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(4)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(4) # Executing section authorize from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(4)   authorize {
(4)     policy filter_username {
(4)       if (&User-Name) {
(4)       if (&User-Name)  -> TRUE
(4)       if (&User-Name)  {
(4)         if (&User-Name =~ / /) {
(4)         if (&User-Name =~ / /)  -> FALSE
(4)         if (&User-Name =~ /@[^@]*@/ ) {
(4)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(4)         if (&User-Name =~ /\.\./ ) {
(4)         if (&User-Name =~ /\.\./ )  -> FALSE
(4)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(4)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(4)         if (&User-Name =~ /\.$/)  {
(4)         if (&User-Name =~ /\.$/)   -> FALSE
(4)         if (&User-Name =~ /@\./)  {
(4)         if (&User-Name =~ /@\./)   -> FALSE
(4)       } # if (&User-Name)  = notfound
(4)     } # policy filter_username = notfound
(4)     [preprocess] = ok
(4)     [chap] = noop
(4)     [mschap] = noop
(4)     [digest] = noop
(4) suffix: Checking for suffix after "@"
(4) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(4) suffix: No such realm "NULL"
(4)     [suffix] = noop
(4) eap: Peer sent EAP Response (code 2) ID 65 length 6
(4) eap: Continuing tunnel setup
(4)     [eap] = ok
(4)   } # authorize = ok
(4) Found Auth-Type = eap
(4) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(4)   authenticate {
(4) eap: Expiring EAP session with state 0xe5744758e6355ef0
(4) eap: Finished EAP session with state 0xe5744758e6355ef0
(4) eap: Previous EAP request found for state 0xe5744758e6355ef0, released from the list
(4) eap: Peer sent packet with method EAP PEAP (25)
(4) eap: Calling submodule eap_peap to process data
(4) eap_peap: (TLS) Peer ACKed our handshake fragment
(4) eap: Sending EAP Request (code 1) ID 66 length 815
(4) eap: EAP session adding &reply:State = 0xe5744758e1365ef0
(4)     [eap] = handled
(4)   } # authenticate = handled
(4) Using Post-Auth-Type Challenge
(4) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(4)   Challenge { ... } # empty sub-section is ignored
(4) session-state: Saving cached attributes
(4)   Framed-MTU = 994
(4)   TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(4)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(4)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(4)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(4)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(4) Sent Access-Challenge Id 4 from 127.0.0.1:1812 to 127.0.0.1:40953 length 879
(4)   EAP-Message = 0x0142032f1900161161646d696e406578616d706c652e6f72673126302406035504030c1d4578616d706c6520436572746966696361746520417574686f72697479821457604ee8762089eef125d540c0bbf0b5a118a4af300f0603551d130101ff040530030101ff30360603551d1f042f302d302ba029a0278625687474703a2f2f7777772e6578616d706c652e6f72672f6578616d706c655f63612e63726c300d06092a864886f70d01010b05000382010100a38f6633d2e2daf953e93089c5b4a66c9abe99620e270f6120051d2195bb6972966c6b98bc7cb21016f89ec601899088e642d40ac9f4ac816aecd5c65482432b5385e04b9bdf7129b175bb275e6021db0725fccea1f8daeb4488f004dfe73aee302570804c93d471bdfc1175c9cd6b7e16a895981dd2e189f5e3d482de9e2ed67b800e000fc33fc1d505bef9840b6037ebb7e9d090a4dbf93ef5dc3a9c956c4f17bc65b21468466551d3e57e331cdcc6dfb1f7279eda22b92b9d6875ae09efa1738980
(4)   Message-Authenticator = 0x00000000000000000000000000000000
(4)   State = 0xe5744758e1365ef048882b2051d821b4
(4) Finished request
Waking up in 4.9 seconds.
(0) Cleaning up request packet ID 0 with timestamp +5 due to cleanup_delay was reached
(1) Cleaning up request packet ID 1 with timestamp +5 due to cleanup_delay was reached
(2) Cleaning up request packet ID 2 with timestamp +5 due to cleanup_delay was reached
(3) Cleaning up request packet ID 3 with timestamp +5 due to cleanup_delay was reached
(4) Cleaning up request packet ID 4 with timestamp +5 due to cleanup_delay was reached
Ready to process requests
(5) Received Access-Request Id 5 from 127.0.0.1:40953 to 127.0.0.1:1812 length 222
(5)   User-Name = "wiced"
(5)   NAS-IP-Address = 127.0.0.1
(5)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(5)   NAS-Port-Type = Wireless-802.11
(5)   Service-Type = Framed-User
(5)   NAS-Port = 1
(5)   Calling-Station-Id = "D4-53-83-BE-23-62"
(5)   Connect-Info = "CONNECT 54Mbps 802.11g"
(5)   Acct-Session-Id = "97327F62FA91CD56"
(5)   Acct-Multi-Session-Id = "DBA7FD1F816412D0"
(5)   WLAN-Pairwise-Cipher = 1027076
(5)   WLAN-Group-Cipher = 1027076
(5)   WLAN-AKM-Suite = 1027073
(5)   WLAN-Group-Mgmt-Cipher = 1027078
(5)   Framed-MTU = 1400
(5)   EAP-Message = 0x0236000a017769636564
(5)   Message-Authenticator = 0x07e61296102ff021374a21dd26c173f4
(5) # Executing section authorize from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(5)   authorize {
(5)     policy filter_username {
(5)       if (&User-Name) {
(5)       if (&User-Name)  -> TRUE
(5)       if (&User-Name)  {
(5)         if (&User-Name =~ / /) {
(5)         if (&User-Name =~ / /)  -> FALSE
(5)         if (&User-Name =~ /@[^@]*@/ ) {
(5)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(5)         if (&User-Name =~ /\.\./ ) {
(5)         if (&User-Name =~ /\.\./ )  -> FALSE
(5)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(5)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(5)         if (&User-Name =~ /\.$/)  {
(5)         if (&User-Name =~ /\.$/)   -> FALSE
(5)         if (&User-Name =~ /@\./)  {
(5)         if (&User-Name =~ /@\./)   -> FALSE
(5)       } # if (&User-Name)  = notfound
(5)     } # policy filter_username = notfound
(5)     [preprocess] = ok
(5)     [chap] = noop
(5)     [mschap] = noop
(5)     [digest] = noop
(5) suffix: Checking for suffix after "@"
(5) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(5) suffix: No such realm "NULL"
(5)     [suffix] = noop
(5) eap: Peer sent EAP Response (code 2) ID 54 length 10
(5) eap: EAP-Identity reply, returning 'ok' so we can short-circuit the rest of authorize
(5)     [eap] = ok
(5)   } # authorize = ok
(5) Found Auth-Type = eap
(5) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(5)   authenticate {
(5) eap: Peer sent packet with method EAP Identity (1)
(5) eap: Calling submodule eap_md5 to process data
(5) eap_md5: Issuing MD5 Challenge
(5) eap: Sending EAP Request (code 1) ID 55 length 22
(5) eap: EAP session adding &reply:State = 0x139d278813aa2356
(5)     [eap] = handled
(5)   } # authenticate = handled
(5) Using Post-Auth-Type Challenge
(5) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(5)   Challenge { ... } # empty sub-section is ignored
(5) Sent Access-Challenge Id 5 from 127.0.0.1:1812 to 127.0.0.1:40953 length 80
(5)   EAP-Message = 0x0137001604100a4f73a14ab34084e48bc23fbd37c42f
(5)   Message-Authenticator = 0x00000000000000000000000000000000
(5)   State = 0x139d278813aa235685a9ee45312a25d6
(5) Finished request
Waking up in 4.9 seconds.
(6) Received Access-Request Id 6 from 127.0.0.1:40953 to 127.0.0.1:1812 length 236
(6)   User-Name = "wiced"
(6)   NAS-IP-Address = 127.0.0.1
(6)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(6)   NAS-Port-Type = Wireless-802.11
(6)   Service-Type = Framed-User
(6)   NAS-Port = 1
(6)   Calling-Station-Id = "D4-53-83-BE-23-62"
(6)   Connect-Info = "CONNECT 54Mbps 802.11g"
(6)   Acct-Session-Id = "97327F62FA91CD56"
(6)   Acct-Multi-Session-Id = "DBA7FD1F816412D0"
(6)   WLAN-Pairwise-Cipher = 1027076
(6)   WLAN-Group-Cipher = 1027076
(6)   WLAN-AKM-Suite = 1027073
(6)   WLAN-Group-Mgmt-Cipher = 1027078
(6)   Framed-MTU = 1400
(6)   EAP-Message = 0x023700060319
(6)   State = 0x139d278813aa235685a9ee45312a25d6
(6)   Message-Authenticator = 0x7e245cc1c6225dcde795e073374b28c3
(6) session-state: No cached attributes
(6) # Executing section authorize from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(6)   authorize {
(6)     policy filter_username {
(6)       if (&User-Name) {
(6)       if (&User-Name)  -> TRUE
(6)       if (&User-Name)  {
(6)         if (&User-Name =~ / /) {
(6)         if (&User-Name =~ / /)  -> FALSE
(6)         if (&User-Name =~ /@[^@]*@/ ) {
(6)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(6)         if (&User-Name =~ /\.\./ ) {
(6)         if (&User-Name =~ /\.\./ )  -> FALSE
(6)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(6)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(6)         if (&User-Name =~ /\.$/)  {
(6)         if (&User-Name =~ /\.$/)   -> FALSE
(6)         if (&User-Name =~ /@\./)  {
(6)         if (&User-Name =~ /@\./)   -> FALSE
(6)       } # if (&User-Name)  = notfound
(6)     } # policy filter_username = notfound
(6)     [preprocess] = ok
(6)     [chap] = noop
(6)     [mschap] = noop
(6)     [digest] = noop
(6) suffix: Checking for suffix after "@"
(6) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(6) suffix: No such realm "NULL"
(6)     [suffix] = noop
(6) eap: Peer sent EAP Response (code 2) ID 55 length 6
(6) eap: No EAP Start, assuming it's an on-going EAP conversation
(6)     [eap] = updated
(6)     [files] = noop
(6)     [expiration] = noop
(6)     [logintime] = noop
Not doing PAP as Auth-Type is already set.
(6)     [pap] = noop
(6)   } # authorize = updated
(6) Found Auth-Type = eap
(6) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(6)   authenticate {
(6) eap: Expiring EAP session with state 0xe5744758e1365ef0
(6) eap: Finished EAP session with state 0x139d278813aa2356
(6) eap: Previous EAP request found for state 0x139d278813aa2356, released from the list
(6) eap: Peer sent packet with method EAP NAK (3)
(6) eap: Found mutually acceptable type PEAP (25)
(6) eap: Calling submodule eap_peap to process data
(6) eap_peap: (TLS) Initiating new session
(6) eap: Sending EAP Request (code 1) ID 56 length 6
(6) eap: EAP session adding &reply:State = 0x139d278812a53e56
(6)     [eap] = handled
(6)   } # authenticate = handled
(6) Using Post-Auth-Type Challenge
(6) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(6)   Challenge { ... } # empty sub-section is ignored
(6) session-state: Saving cached attributes
(6)   Framed-MTU = 994
(6) Sent Access-Challenge Id 6 from 127.0.0.1:1812 to 127.0.0.1:40953 length 64
(6)   EAP-Message = 0x013800061920
(6)   Message-Authenticator = 0x00000000000000000000000000000000
(6)   State = 0x139d278812a53e5685a9ee45312a25d6
(6) Finished request
Waking up in 4.9 seconds.
(7) Received Access-Request Id 7 from 127.0.0.1:40953 to 127.0.0.1:1812 length 406
(7)   User-Name = "wiced"
(7)   NAS-IP-Address = 127.0.0.1
(7)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(7)   NAS-Port-Type = Wireless-802.11
(7)   Service-Type = Framed-User
(7)   NAS-Port = 1
(7)   Calling-Station-Id = "D4-53-83-BE-23-62"
(7)   Connect-Info = "CONNECT 54Mbps 802.11g"
(7)   Acct-Session-Id = "97327F62FA91CD56"
(7)   Acct-Multi-Session-Id = "DBA7FD1F816412D0"
(7)   WLAN-Pairwise-Cipher = 1027076
(7)   WLAN-Group-Cipher = 1027076
(7)   WLAN-AKM-Suite = 1027073
(7)   WLAN-Group-Mgmt-Cipher = 1027078
(7)   Framed-MTU = 1400
(7)   EAP-Message = 0x023800b01980000000a616030100a10100009d0303000004297e2455daea53ab57ede7a22dc2484393219a5332b5e67be3b9eaab0e00003ac030c0aec0a8006b00c400390088006700be00330045c02cc02bc0afc023c009c00ac004c005c02f003d00c000350084003c00ba002f004100ff0100003a000d001600140603060105030501040304010303030102030201000a000e000c001800170016001a00150013000b000201000016000000170000
(7)   State = 0x139d278812a53e5685a9ee45312a25d6
(7)   Message-Authenticator = 0x60146f163609bd1f8c4e6824a8c32926
(7) Restoring &session-state
(7)   &session-state:Framed-MTU = 994
(7) # Executing section authorize from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(7)   authorize {
(7)     policy filter_username {
(7)       if (&User-Name) {
(7)       if (&User-Name)  -> TRUE
(7)       if (&User-Name)  {
(7)         if (&User-Name =~ / /) {
(7)         if (&User-Name =~ / /)  -> FALSE
(7)         if (&User-Name =~ /@[^@]*@/ ) {
(7)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(7)         if (&User-Name =~ /\.\./ ) {
(7)         if (&User-Name =~ /\.\./ )  -> FALSE
(7)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(7)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(7)         if (&User-Name =~ /\.$/)  {
(7)         if (&User-Name =~ /\.$/)   -> FALSE
(7)         if (&User-Name =~ /@\./)  {
(7)         if (&User-Name =~ /@\./)   -> FALSE
(7)       } # if (&User-Name)  = notfound
(7)     } # policy filter_username = notfound
(7)     [preprocess] = ok
(7)     [chap] = noop
(7)     [mschap] = noop
(7)     [digest] = noop
(7) suffix: Checking for suffix after "@"
(7) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(7) suffix: No such realm "NULL"
(7)     [suffix] = noop
(7) eap: Peer sent EAP Response (code 2) ID 56 length 176
(7) eap: Continuing tunnel setup
(7)     [eap] = ok
(7)   } # authorize = ok
(7) Found Auth-Type = eap
(7) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(7)   authenticate {
(7) eap: Expiring EAP session with state 0xe5744758e1365ef0
(7) eap: Finished EAP session with state 0x139d278812a53e56
(7) eap: Previous EAP request found for state 0x139d278812a53e56, released from the list
(7) eap: Peer sent packet with method EAP PEAP (25)
(7) eap: Calling submodule eap_peap to process data
(7) eap_peap: (TLS) EAP Peer says that the final record size will be 166 bytes
(7) eap_peap: (TLS) EAP Got all data (166 bytes)
(7) eap_peap: (TLS) Handshake state - before SSL initialization
(7) eap_peap: (TLS) Handshake state - Server before SSL initialization
(7) eap_peap: (TLS) Handshake state - Server before SSL initialization
(7) eap_peap: (TLS) recv TLS 1.3 Handshake, ClientHello
(7) eap_peap: (TLS) Handshake state - Server SSLv3/TLS read client hello
(7) eap_peap: (TLS) send TLS 1.2 Handshake, ServerHello
(7) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write server hello
(7) eap_peap: (TLS) send TLS 1.2 Handshake, Certificate
(7) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write certificate
(7) eap_peap: (TLS) send TLS 1.2 Handshake, ServerKeyExchange
(7) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write key exchange
(7) eap_peap: (TLS) send TLS 1.2 Handshake, ServerHelloDone
(7) eap_peap: (TLS) Handshake state - Server SSLv3/TLS write server done
(7) eap_peap: (TLS) Server : Need to read more data: SSLv3/TLS write server done
(7) eap_peap: (TLS) In Handshake Phase
(7) eap: Sending EAP Request (code 1) ID 57 length 1004
(7) eap: EAP session adding &reply:State = 0x139d278811a43e56
(7)     [eap] = handled
(7)   } # authenticate = handled
(7) Using Post-Auth-Type Challenge
(7) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(7)   Challenge { ... } # empty sub-section is ignored
(7) session-state: Saving cached attributes
(7)   Framed-MTU = 994
(7)   TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(7)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(7)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(7)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(7)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(7) Sent Access-Challenge Id 7 from 127.0.0.1:1812 to 127.0.0.1:40953 length 1068
(7)   EAP-Message = 0x013903ec19c000000aed160303003d020000390303c97c68830f048271a87b70d835f29f2a712b00f12221765c7d5e15a987d4f51300c030000011ff01000100000b00040300010200170000160303092b0b0009270009240004203082041c30820304a003020102020101300d06092a864886f70d01010b0500308193310b3009060355040613024652310f300d06035504080c065261646975733112301006035504070c09536f6d65776865726531153013060355040a0c0c4578616d706c6520496e632e3120301e06092a864886f70d010901161161646d696e406578616d706c652e6f72673126302406035504030c1d4578616d706c6520436572746966696361746520417574686f72697479301e170d3233313232303134333732315a170d3234303231383134333732315a307c310b3009060355040613024652310f300d06035504080c0652616469757331153013060355040a0c0c4578616d706c6520496e632e3123302106035504030c1a4578616d70
(7)   Message-Authenticator = 0x00000000000000000000000000000000
(7)   State = 0x139d278811a43e5685a9ee45312a25d6
(7) Finished request
Waking up in 4.9 seconds.
(8) Received Access-Request Id 8 from 127.0.0.1:40953 to 127.0.0.1:1812 length 236
(8)   User-Name = "wiced"
(8)   NAS-IP-Address = 127.0.0.1
(8)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(8)   NAS-Port-Type = Wireless-802.11
(8)   Service-Type = Framed-User
(8)   NAS-Port = 1
(8)   Calling-Station-Id = "D4-53-83-BE-23-62"
(8)   Connect-Info = "CONNECT 54Mbps 802.11g"
(8)   Acct-Session-Id = "97327F62FA91CD56"
(8)   Acct-Multi-Session-Id = "DBA7FD1F816412D0"
(8)   WLAN-Pairwise-Cipher = 1027076
(8)   WLAN-Group-Cipher = 1027076
(8)   WLAN-AKM-Suite = 1027073
(8)   WLAN-Group-Mgmt-Cipher = 1027078
(8)   Framed-MTU = 1400
(8)   EAP-Message = 0x023900061900
(8)   State = 0x139d278811a43e5685a9ee45312a25d6
(8)   Message-Authenticator = 0xd69e22f02b7431a551bd59b01a919f4b
(8) Restoring &session-state
(8)   &session-state:Framed-MTU = 994
(8)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(8)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(8)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(8)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(8)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(8) # Executing section authorize from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(8)   authorize {
(8)     policy filter_username {
(8)       if (&User-Name) {
(8)       if (&User-Name)  -> TRUE
(8)       if (&User-Name)  {
(8)         if (&User-Name =~ / /) {
(8)         if (&User-Name =~ / /)  -> FALSE
(8)         if (&User-Name =~ /@[^@]*@/ ) {
(8)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(8)         if (&User-Name =~ /\.\./ ) {
(8)         if (&User-Name =~ /\.\./ )  -> FALSE
(8)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(8)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(8)         if (&User-Name =~ /\.$/)  {
(8)         if (&User-Name =~ /\.$/)   -> FALSE
(8)         if (&User-Name =~ /@\./)  {
(8)         if (&User-Name =~ /@\./)   -> FALSE
(8)       } # if (&User-Name)  = notfound
(8)     } # policy filter_username = notfound
(8)     [preprocess] = ok
(8)     [chap] = noop
(8)     [mschap] = noop
(8)     [digest] = noop
(8) suffix: Checking for suffix after "@"
(8) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(8) suffix: No such realm "NULL"
(8)     [suffix] = noop
(8) eap: Peer sent EAP Response (code 2) ID 57 length 6
(8) eap: Continuing tunnel setup
(8)     [eap] = ok
(8)   } # authorize = ok
(8) Found Auth-Type = eap
(8) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(8)   authenticate {
(8) eap: Expiring EAP session with state 0xe5744758e1365ef0
(8) eap: Finished EAP session with state 0x139d278811a43e56
(8) eap: Previous EAP request found for state 0x139d278811a43e56, released from the list
(8) eap: Peer sent packet with method EAP PEAP (25)
(8) eap: Calling submodule eap_peap to process data
(8) eap_peap: (TLS) Peer ACKed our handshake fragment
(8) eap: Sending EAP Request (code 1) ID 58 length 1000
(8) eap: EAP session adding &reply:State = 0x139d278810a73e56
(8)     [eap] = handled
(8)   } # authenticate = handled
(8) Using Post-Auth-Type Challenge
(8) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(8)   Challenge { ... } # empty sub-section is ignored
(8) session-state: Saving cached attributes
(8)   Framed-MTU = 994
(8)   TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(8)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(8)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(8)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(8)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(8) Sent Access-Challenge Id 8 from 127.0.0.1:1812 to 127.0.0.1:40953 length 1064
(8)   EAP-Message = 0x013a03e81940b365595edec634be72466f496c8cad448e057893222e9d9b96fa51c2d84df387dace2b8dd56e85ea1e27ed302547bc22a35b0349ae7075502f1be4a933467c7ec41b12f969f65caf80e82b77b04c1d46756210be2684f027b347debb97d3bca395775660fe2168969187b5d46b43284bb130757803bdfe082cbf44b37353c4f853131bace8ca9c30290a88b1bf0a680004fe308204fa308203e2a003020102021457604ee8762089eef125d540c0bbf0b5a118a4af300d06092a864886f70d01010b0500308193310b3009060355040613024652310f300d06035504080c065261646975733112301006035504070c09536f6d65776865726531153013060355040a0c0c4578616d706c6520496e632e3120301e06092a864886f70d010901161161646d696e406578616d706c652e6f72673126302406035504030c1d4578616d706c6520436572746966696361746520417574686f72697479301e170d3233313232303134333731355a170d32343032
(8)   Message-Authenticator = 0x00000000000000000000000000000000
(8)   State = 0x139d278810a73e5685a9ee45312a25d6
(8) Finished request
Waking up in 4.9 seconds.
(9) Received Access-Request Id 9 from 127.0.0.1:40953 to 127.0.0.1:1812 length 236
(9)   User-Name = "wiced"
(9)   NAS-IP-Address = 127.0.0.1
(9)   Called-Station-Id = "3C-A0-67-80-99-A3:Hostapd-AP-E"
(9)   NAS-Port-Type = Wireless-802.11
(9)   Service-Type = Framed-User
(9)   NAS-Port = 1
(9)   Calling-Station-Id = "D4-53-83-BE-23-62"
(9)   Connect-Info = "CONNECT 54Mbps 802.11g"
(9)   Acct-Session-Id = "97327F62FA91CD56"
(9)   Acct-Multi-Session-Id = "DBA7FD1F816412D0"
(9)   WLAN-Pairwise-Cipher = 1027076
(9)   WLAN-Group-Cipher = 1027076
(9)   WLAN-AKM-Suite = 1027073
(9)   WLAN-Group-Mgmt-Cipher = 1027078
(9)   Framed-MTU = 1400
(9)   EAP-Message = 0x023a00061900
(9)   State = 0x139d278810a73e5685a9ee45312a25d6
(9)   Message-Authenticator = 0xb22df4ae1f9401322568251f2822c2a1
(9) Restoring &session-state
(9)   &session-state:Framed-MTU = 994
(9)   &session-state:TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(9)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(9)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(9)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(9)   &session-state:TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(9) # Executing section authorize from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(9)   authorize {
(9)     policy filter_username {
(9)       if (&User-Name) {
(9)       if (&User-Name)  -> TRUE
(9)       if (&User-Name)  {
(9)         if (&User-Name =~ / /) {
(9)         if (&User-Name =~ / /)  -> FALSE
(9)         if (&User-Name =~ /@[^@]*@/ ) {
(9)         if (&User-Name =~ /@[^@]*@/ )  -> FALSE
(9)         if (&User-Name =~ /\.\./ ) {
(9)         if (&User-Name =~ /\.\./ )  -> FALSE
(9)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
(9)         if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))   -> FALSE
(9)         if (&User-Name =~ /\.$/)  {
(9)         if (&User-Name =~ /\.$/)   -> FALSE
(9)         if (&User-Name =~ /@\./)  {
(9)         if (&User-Name =~ /@\./)   -> FALSE
(9)       } # if (&User-Name)  = notfound
(9)     } # policy filter_username = notfound
(9)     [preprocess] = ok
(9)     [chap] = noop
(9)     [mschap] = noop
(9)     [digest] = noop
(9) suffix: Checking for suffix after "@"
(9) suffix: No '@' in User-Name = "wiced", looking up realm NULL
(9) suffix: No such realm "NULL"
(9)     [suffix] = noop
(9) eap: Peer sent EAP Response (code 2) ID 58 length 6
(9) eap: Continuing tunnel setup
(9)     [eap] = ok
(9)   } # authorize = ok
(9) Found Auth-Type = eap
(9) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(9)   authenticate {
(9) eap: Expiring EAP session with state 0xe5744758e1365ef0
(9) eap: Finished EAP session with state 0x139d278810a73e56
(9) eap: Previous EAP request found for state 0x139d278810a73e56, released from the list
(9) eap: Peer sent packet with method EAP PEAP (25)
(9) eap: Calling submodule eap_peap to process data
(9) eap_peap: (TLS) Peer ACKed our handshake fragment
(9) eap: Sending EAP Request (code 1) ID 59 length 815
(9) eap: EAP session adding &reply:State = 0x139d278817a63e56
(9)     [eap] = handled
(9)   } # authenticate = handled
(9) Using Post-Auth-Type Challenge
(9) # Executing group from file Freeradius/Conf/E_rogue_wpa2//sites-enabled/default
(9)   Challenge { ... } # empty sub-section is ignored
(9) session-state: Saving cached attributes
(9)   Framed-MTU = 994
(9)   TLS-Session-Information = "(TLS) recv TLS 1.3 Handshake, ClientHello"
(9)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHello"
(9)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, Certificate"
(9)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerKeyExchange"
(9)   TLS-Session-Information = "(TLS) send TLS 1.2 Handshake, ServerHelloDone"
(9) Sent Access-Challenge Id 9 from 127.0.0.1:1812 to 127.0.0.1:40953 length 879
(9)   EAP-Message = 0x013b032f1900161161646d696e406578616d706c652e6f72673126302406035504030c1d4578616d706c6520436572746966696361746520417574686f72697479821457604ee8762089eef125d540c0bbf0b5a118a4af300f0603551d130101ff040530030101ff30360603551d1f042f302d302ba029a0278625687474703a2f2f7777772e6578616d706c652e6f72672f6578616d706c655f63612e63726c300d06092a864886f70d01010b05000382010100a38f6633d2e2daf953e93089c5b4a66c9abe99620e270f6120051d2195bb6972966c6b98bc7cb21016f89ec601899088e642d40ac9f4ac816aecd5c65482432b5385e04b9bdf7129b175bb275e6021db0725fccea1f8daeb4488f004dfe73aee302570804c93d471bdfc1175c9cd6b7e16a895981dd2e189f5e3d482de9e2ed67b800e000fc33fc1d505bef9840b6037ebb7e9d090a4dbf93ef5dc3a9c956c4f17bc65b21468466551d3e57e331cdcc6dfb1f7279eda22b92b9d6875ae09efa1738980
(9)   Message-Authenticator = 0x00000000000000000000000000000000
(9)   State = 0x139d278817a63e5685a9ee45312a25d6
(9) Finished request
Waking up in 4.9 seconds.
(5) Cleaning up request packet ID 5 with timestamp +47 due to cleanup_delay was reached
(6) Cleaning up request packet ID 6 with timestamp +47 due to cleanup_delay was reached
(7) Cleaning up request packet ID 7 with timestamp +47 due to cleanup_delay was reached
(8) Cleaning up request packet ID 8 with timestamp +47 due to cleanup_delay was reached
(9) Cleaning up request packet ID 9 with timestamp +47 due to cleanup_delay was reached
Ready to process requests
Ready to process requests
Signalled to terminate
Exiting normally
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! EAP session with state 0xe5744758e1365ef048882b2051d821b4 did not finish!                  !!
!! Please read http://wiki.freeradius.org/guide/Certificate_Compatibility     !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! EAP session with state 0x139d278817a63e5685a9ee45312a25d6 did not finish!                  !!
!! Please read http://wiki.freeradius.org/guide/Certificate_Compatibility     !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

[0;36mFreeRADIUS is stopped.[0m


