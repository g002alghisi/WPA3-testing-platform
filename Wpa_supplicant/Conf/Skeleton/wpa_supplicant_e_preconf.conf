##### Example wpa_supplicant configuration file ###############################
#
# This file describes configuration file format and lists all available option.
# Please also take a look at simpler configuration examples in 'examples'
# subdirectory.
#
# Empty lines and lines starting with # are ignored

# NOTE! This file may contain password information and should probably be made
# readable only by root user on multiuser systems.

# Note: All file paths in this configuration file should use full (absolute,
# not relative to working directory) path in order to allow working directory
# to be changed. This can happen if wpa_supplicant is run in the background.

# Whether to allow wpa_supplicant to update (overwrite) configuration
#
# This option can be used to allow wpa_supplicant to overwrite configuration
# file whenever configuration is changed (e.g., new network block is added with
# wpa_cli or wpa_gui, or a password is changed). This is required for
# wpa_cli/wpa_gui to be able to store the configuration changes permanently.
# Please note that overwriting configuration file will remove the comments from
# it.
update_config=0

# global configuration (shared by all network blocks)
#
# Parameters for the control interface. If this is specified, wpa_supplicant
# will open a control interface that is available for external programs to
# manage wpa_supplicant. The meaning of this string depends on which control
# interface mechanism is used. For all cases, the existence of this parameter
# in configuration is used to determine whether the control interface is
# enabled.
#
# For UNIX domain sockets (default on Linux and BSD): This is a directory that
# will be created for UNIX domain sockets for listening to requests from
# external programs (CLI/GUI, etc.) for status information and configuration.
# The socket file will be named based on the interface name, so multiple
# wpa_supplicant processes can be run at the same time if more than one
# interface is used.
# /var/run/wpa_supplicant is the recommended directory for sockets and by
# default, wpa_cli will use it when trying to connect with wpa_supplicant.
#
# Access control for the control interface can be configured by setting the
# directory to allow only members of a group to use sockets. This way, it is
# possible to run wpa_supplicant as root (since it needs to change network
# configuration and open raw sockets) and still allow GUI/CLI components to be
# run as non-root users. However, since the control interface can be used to
# change the network configuration, this access needs to be protected in many
# cases. By default, wpa_supplicant is configured to use gid 0 (root). If you
# want to allow non-root users to use the control interface, add a new group
# and change this value to match with that group. Add users that should have
# control interface access to this group. If this variable is commented out or
# not included in the configuration file, group will not be changed from the
# value it got by default when the directory or socket was created.
#
# When configuring both the directory and group, use following format:
# DIR=/var/run/wpa_supplicant GROUP=sudo
# DIR=/var/run/wpa_supplicant GROUP=0
# (group can be either group name or gid)
#
# For UDP connections (default on Windows): The value will be ignored. This
# variable is just used to select that the control interface is to be created.
# The value can be set to, e.g., udp (ctrl_interface=udp)
#
# For Windows Named Pipe: This value can be used to set the security descriptor
# for controlling access to the control interface. Security descriptor can be
# set using Security Descriptor String Format (see http://msdn.microsoft.com/
# library/default.asp?url=/library/en-us/secauthz/security/
# security_descriptor_string_format.asp). The descriptor string needs to be
# prefixed with SDDL=. For example, ctrl_interface=SDDL=D: would set an empty
# DACL (which will reject all connections). See README-Windows.txt for more
# information about SDDL string format.
#
ctrl_interface=/var/run/wpa_supplicant
ctrl_interface_group=sudo

# IEEE 802.1X/EAPOL version
# wpa_supplicant is implemented based on IEEE Std 802.1X-2004 which defines
# EAPOL version 2. However, there are many APs that do not handle the new
# version number correctly (they seem to drop the frames completely). In order
# to make wpa_supplicant interoperate with these APs, the version number is set
# to 1 by default. This configuration value can be used to set it to the new
# version (2).
# Note: When using MACsec, eapol_version shall be set to 3, which is
# defined in IEEE Std 802.1X-2010.
eapol_version=2

# AP scanning/selection
# By default, wpa_supplicant requests driver to perform AP scanning and then
# uses the scan results to select a suitable AP. Another alternative is to
# allow the driver to take care of AP scanning and selection and use
# wpa_supplicant just to process EAPOL frames based on IEEE 802.11 association
# information from the driver.
# 1: wpa_supplicant initiates scanning and AP selection; if no APs matching to
#    the currently enabled networks are found, a new network (IBSS or AP mode
#    operation) may be initialized (if configured) (default)
# 0: This mode must only be used when using wired Ethernet drivers
#    (including MACsec).
# 2: like 0, but associate with APs using security policy and SSID (but not
#    BSSID); this can be used, e.g., with ndiswrapper and NDIS drivers to
#    enable operation with hidden SSIDs and optimized roaming; in this mode,
#    the network blocks in the configuration file are tried one by one until
#    the driver reports successful association; each network block should have
#    explicit security policy (i.e., only one option in the lists) for
#    key_mgmt, pairwise, group, proto variables
# Note: ap_scan=0/2 should not be used with the nl80211 driver interface (the
# current Linux interface). ap_scan=1 is the only option working with nl80211.
# For finding networks using hidden SSID, scan_ssid=1 in the network block can
# be used with nl80211.
# When using IBSS or AP mode, ap_scan=2 mode can force the new network to be
# created immediately regardless of scan results. ap_scan=1 mode will first try
# to scan for existing networks and only if no matches with the enabled
# networks are found, a new IBSS or AP mode network is created.
ap_scan=1

# Whether to force passive scan for network connection
#
# By default, scans will send out Probe Request frames on channels that allow
# active scanning. This advertise the local station to the world. Normally this
# is fine, but users may wish to do passive scanning where the radio should only
# listen quietly for Beacon frames and not send any Probe Request frames. Actual
# functionality may be driver dependent.
#
# This parameter can be used to force only passive scanning to be used
# for network connection cases. It should be noted that this will slow
# down scan operations and reduce likelihood of finding the AP. In
# addition, some use cases will override this due to functional
# requirements, e.g., for finding an AP that uses hidden SSID
# (scan_ssid=1) or P2P device discovery.
#
# 0:  Do normal scans (allow active scans) (default)
# 1:  Do passive scans.
#passive_scan=0

# OpenSSL Engine support
# These options can be used to load OpenSSL engines in special or legacy
# modes.
# The two engines that are supported currently are shown below:
# They are both from the opensc project (http://www.opensc.org/)
# By default the PKCS#11 engine is loaded if the client_cert or
# private_key option appear to be a PKCS#11 URI, and these options
# should not need to be used explicitly.
# make the opensc engine available
#opensc_engine_path=/usr/lib/opensc/engine_opensc.so
# make the pkcs11 engine available
#pkcs11_engine_path=/usr/lib/opensc/engine_pkcs11.so
# configure the path to the pkcs11 module required by the pkcs11 engine
#pkcs11_module_path=/usr/lib/pkcs11/opensc-pkcs11.so

# Driver interface parameters
# This field can be used to configure arbitrary driver interface parameters. The
# format is specific to the selected driver interface. This field is not used
# in most cases.
#driver_param="field=value"

# Country code
# The ISO/IEC alpha2 country code for the country in which this device is
# currently operating.
country=IT

# MAC address policy default
# 0 = use permanent MAC address
# 1 = use random MAC address for each ESS connection
# 2 = like 1, but maintain OUI (with local admin bit set)
#
# By default, permanent MAC address is used unless policy is changed by
# the per-network mac_addr parameter. Global mac_addr=1 can be used to
# change this default behavior.
#mac_addr=0
 

# network block
#
# Each network (usually AP's sharing the same SSID) is configured as a separate
# block in this configuration file. The network blocks are in preference order
# (the first match is used).
#
# network block fields:
#
# disabled:
#  0 = this network can be used (default)
#  1 = this network block is disabled (can be enabled through ctrl_iface,
#      e.g., with wpa_cli or wpa_gui)
#
# ssid: SSID (mandatory); network name in one of the optional formats:
#  - an ASCII string with double quotation
#  - a hex string (two characters per octet of SSID)
#  - a printf-escaped ASCII string P"<escaped string>"
#
# scan_ssid:
#  0 = do not scan this SSID with specific Probe Request frames (default)
#  1 = scan with SSID-specific Probe Request frames (this can be used to
#      find APs that do not accept broadcast SSID or use multiple SSIDs;
#      this will add latency to scanning, so enable this only when needed)
#
# bssid: BSSID (optional); if set, this network block is used only when
#  associating with the AP using the configured BSSID
#
# ignore_broadcast_ssid: SSID broadcast behavior
# Send empty SSID in beacons and ignore probe request frames that do not
# specify full SSID, i.e., require stations to know SSID.
# default: disabled (0)
# 1 = send empty (length=0) SSID in beacon and ignore probe request for
#     broadcast SSID
# 2 = clear SSID (ASCII 0), but keep the original length (this may be required
#     with some clients that do not support empty SSID) and ignore probe
#     requests for broadcast SSID
#
# priority: priority group (integer)
# By default, all networks will get same priority group (0). If some of the
# networks are more desirable, this field can be used to change the order in
# which wpa_supplicant goes through the networks when selecting a BSS. The
# priority groups will be iterated in decreasing priority (i.e., the larger the
# priority value, the sooner the network is matched against the scan results).
# Within each priority group, networks will be selected based on security
# policy, signal strength, etc.
# Please note that AP scanning with scan_ssid=1 and ap_scan=2 mode are not
# using this priority to select the order for scanning. Instead, they try the
# networks in the order that used in the configuration file.
#
# proto: list of accepted protocols
# WPA = WPA/IEEE 802.11i/D3.0
# RSN = WPA2/IEEE 802.11i (also WPA2 can be used as an alias for RSN)
# Note that RSN is used also for WPA3.
# If not set, this defaults to: WPA RSN
#
# key_mgmt: list of accepted authenticated key management protocols
# WPA-PSK = WPA pre-shared key (this requires 'psk' field)
# WPA-EAP = WPA using EAP authentication
# IEEE8021X = IEEE 802.1X using EAP authentication and (optionally) dynamically
#  generated WEP keys
# NONE = WPA is not used; plaintext or static WEP could be used
# WPA-NONE = WPA-None for IBSS (deprecated; use proto=RSN key_mgmt=WPA-PSK
#  instead)
# FT-PSK = Fast BSS Transition (IEEE 802.11r) with pre-shared key
# FT-EAP = Fast BSS Transition (IEEE 802.11r) with EAP authentication
# FT-EAP-SHA384 = Fast BSS Transition (IEEE 802.11r) with EAP authentication
#  and using SHA384
# WPA-PSK-SHA256 = Like WPA-PSK but using stronger SHA256-based algorithms
# WPA-EAP-SHA256 = Like WPA-EAP but using stronger SHA256-based algorithms
# SAE = Simultaneous authentication of equals; pre-shared key/password -based
#  authentication with stronger security than WPA-PSK especially when using
#  not that strong password; a.k.a. WPA3-Personal
# FT-SAE = SAE with FT
# WPA-EAP-SUITE-B = Suite B 128-bit level
# WPA-EAP-SUITE-B-192 = Suite B 192-bit level
# OSEN = Hotspot 2.0 Rel 2 online signup connection
# FILS-SHA256 = Fast Initial Link Setup with SHA256
# FILS-SHA384 = Fast Initial Link Setup with SHA384
# FT-FILS-SHA256 = FT and Fast Initial Link Setup with SHA256
# FT-FILS-SHA384 = FT and Fast Initial Link Setup with SHA384
# OWE = Opportunistic Wireless Encryption (a.k.a. Enhanced Open)
# DPP = Device Provisioning Protocol
# If not set, this defaults to: WPA-PSK WPA-EAP
#
# ieee80211w: whether management frame protection is enabled
# 0 = disabled (default unless changed with the global pmf parameter)
# 1 = optional
# 2 = required
# The most common configuration options for this based on the PMF (protected
# management frames) certification program are:
# PMF enabled: ieee80211w=1 and key_mgmt=WPA-EAP WPA-EAP-SHA256
# PMF required: ieee80211w=2 and key_mgmt=WPA-EAP-SHA256
# (and similarly for WPA-PSK and WPA-PSK-SHA256 if WPA2-Personal is used)
# WPA3-Personal-only mode: ieee80211w=2 and key_mgmt=SAE
#
# auth_alg: list of allowed IEEE 802.11 authentication algorithms
# OPEN = Open System authentication (required for WPA/WPA2)
# SHARED = Shared Key authentication (requires static WEP keys)
# LEAP = LEAP/Network EAP (only used with LEAP)
# If not set, automatic selection is used (Open System with LEAP enabled if
# LEAP is allowed as one of the EAP methods).
#
# pairwise: list of accepted pairwise (unicast) ciphers for WPA
# CCMP = AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0]
# TKIP = Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]
# NONE = Use only Group Keys (deprecated, should not be included if APs support
#  pairwise keys)
# If not set, this defaults to: CCMP TKIP
#
# group: list of accepted group (broadcast/multicast) ciphers for WPA
# CCMP = AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0]
# TKIP = Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]
# WEP104 = WEP (Wired Equivalent Privacy) with 104-bit key
# WEP40 = WEP (Wired Equivalent Privacy) with 40-bit key [IEEE 802.11]
# If not set, this defaults to: CCMP TKIP WEP104 WEP40
#
# group_mgmt: list of accepted group management ciphers for RSN (PMF)
# AES-128-CMAC = BIP-CMAC-128
# BIP-GMAC-128
# BIP-GMAC-256
# BIP-CMAC-256
# If not set, no constraint on the cipher, i.e., accept whichever cipher the AP
# indicates.
#
# psk: WPA preshared key; 256-bit pre-shared key
# The key used in WPA-PSK mode can be entered either as 64 hex-digits, i.e.,
# 32 bytes or as an ASCII passphrase (in which case, the real PSK will be
# generated using the passphrase and SSID). ASCII passphrase must be between
# 8 and 63 characters (inclusive). ext:<name of external PSK field> format can
# be used to indicate that the PSK/passphrase is stored in external storage.
# This field is not needed, if WPA-EAP is used.
# Note: Separate tool, wpa_passphrase, can be used to generate 256-bit keys
# from ASCII passphrase. This process uses lot of CPU and wpa_supplicant
# startup and reconfiguration time can be optimized by generating the PSK only
# only when the passphrase or SSID has actually changed.
#
# sae_password: SAE password
# This parameter can be used to set a password for SAE. By default, the
# passphrase from the psk parameter is used if this separate parameter is not
# used, but psk follows the WPA-PSK constraints (8..63 characters) even though
# SAE passwords do not have such constraints.
#
# Following fields are only used with internal EAP implementation.
# eap: space-separated list of accepted EAP methods
#  MD5 = EAP-MD5 (insecure and does not generate keying material ->
#      cannot be used with WPA; to be used as a Phase 2 method
#      with EAP-PEAP or EAP-TTLS)
#       MSCHAPV2 = EAP-MSCHAPv2 (cannot be used separately with WPA; to be used
#    as a Phase 2 method with EAP-PEAP or EAP-TTLS)
#       OTP = EAP-OTP (cannot be used separately with WPA; to be used
#    as a Phase 2 method with EAP-PEAP or EAP-TTLS)
#       GTC = EAP-GTC (cannot be used separately with WPA; to be used
#    as a Phase 2 method with EAP-PEAP or EAP-TTLS)
#  TLS = EAP-TLS (client and server certificate)
#  PEAP = EAP-PEAP (with tunnelled EAP authentication)
#  TTLS = EAP-TTLS (with tunnelled EAP or PAP/CHAP/MSCHAP/MSCHAPV2
#       authentication)
#  If not set, all compiled in methods are allowed.
#
# identity: Identity string for EAP
#  This field is also used to configure user NAI for
#  EAP-PSK/PAX/SAKE/GPSK.
# anonymous_identity: Anonymous identity string for EAP (to be used as the
#  unencrypted identity with EAP types that support different tunnelled
#  identity, e.g., EAP-TTLS). This field can also be used with
#  EAP-SIM/AKA/AKA' to store the pseudonym identity.
# password: Password string for EAP. This field can include either the
#  plaintext password (using ASCII or hex string) or a NtPasswordHash
#  (16-byte MD4 hash of password) in hash:<32 hex digits> format.
#  NtPasswordHash can only be used when the password is for MSCHAPv2 or
#  MSCHAP (EAP-MSCHAPv2, EAP-TTLS/MSCHAPv2, EAP-TTLS/MSCHAP, LEAP).
#  EAP-PSK (128-bit PSK), EAP-PAX (128-bit PSK), and EAP-SAKE (256-bit
#  PSK) is also configured using this field. For EAP-GPSK, this is a
#  variable length PSK. ext:<name of external password field> format can
#  be used to indicate that the password is stored in external storage.
# ca_cert: File path to CA certificate file (PEM/DER). This file can have one
#  or more trusted CA certificates. If ca_cert and ca_path are not
#  included, server certificate will not be verified. This is insecure and
#  a trusted CA certificate should always be configured when using
#  EAP-TLS/TTLS/PEAP. Full path should be used since working directory may
#  change when wpa_supplicant is run in the background.
#
# ca_path: Directory path for CA certificate files (PEM). This path may
#  contain multiple CA certificates in OpenSSL format. Common use for this
#  is to point to system trusted CA list which is often installed into
#  directory like /etc/ssl/certs. If configured, these certificates are
#  added to the list of trusted CAs. ca_cert may also be included in that
#  case, but it is not required.
# client_cert: File path to client certificate file (PEM/DER)
#  Full path should be used since working directory may change when
#  wpa_supplicant is run in the background.
#  Alternatively, a named configuration blob can be used by setting this
#  to blob://<blob name>.
# private_key: File path to client private key file (PEM/DER/PFX)
#  When PKCS#12/PFX file (.p12/.pfx) is used, client_cert should be
#  commented out. Both the private key and certificate will be read from
#  the PKCS#12 file in this case. Full path should be used since working
#  directory may change when wpa_supplicant is run in the background.
#  Windows certificate store can be used by leaving client_cert out and
#  configuring private_key in one of the following formats:
#  cert://substring_to_match
#  hash://certificate_thumbprint_in_hex
#  for example: private_key="hash://63093aa9c47f56ae88334c7b65a4"
#  Note that when running wpa_supplicant as an application, the user
#  certificate store (My user account) is used, whereas computer store
#  (Computer account) is used when running wpasvc as a service.
#  Alternatively, a named configuration blob can be used by setting this
#  to blob://<blob name>.
# private_key_passwd: Password for private key file (if left out, this will be
#  asked through control interface)
# dh_file: File path to DH/DSA parameters file (in PEM format)
#  This is an optional configuration file for setting parameters for an
#  ephemeral DH key exchange. In most cases, the default RSA
#  authentication does not use this configuration. However, it is possible
#  setup RSA to use ephemeral DH key exchange. In addition, ciphers with
#  DSA keys always use ephemeral DH keys. This can be used to achieve
#  forward secrecy. If the file is in DSA parameters format, it will be
#  automatically converted into DH params.
# subject_match: Substring to be matched against the subject of the
#  authentication server certificate. If this string is set, the server
#  certificate is only accepted if it contains this string in the subject.
#  The subject string is in following format:
#  /C=US/ST=CA/L=San Francisco/CN=Test AS/emailAddress=as@example.com
#  Note: Since this is a substring match, this cannot be used securely to
#  do a suffix match against a possible domain name in the CN entry. For
#  such a use case, domain_suffix_match or domain_match should be used
#  instead.
# altsubject_match: Semicolon separated string of entries to be matched against
#  the alternative subject name of the authentication server certificate.
#  If this string is set, the server certificate is only accepted if it
#  contains one of the entries in an alternative subject name extension.
#  altSubjectName string is in following format: TYPE:VALUE
#  Example: EMAIL:server@example.com
#  Example: DNS:server.example.com;DNS:server2.example.com
#  Following types are supported: EMAIL, DNS, URI
# domain_suffix_match: Constraint for server domain name. If set, this FQDN is
#  used as a suffix match requirement for the AAA server certificate in
#  SubjectAltName dNSName element(s). If a matching dNSName is found, this
#  constraint is met. If no dNSName values are present, this constraint is
#  matched against SubjectName CN using same suffix match comparison.
#
#  Suffix match here means that the host/domain name is compared one label
#  at a time starting from the top-level domain and all the labels in
#  domain_suffix_match shall be included in the certificate. The
#  certificate may include additional sub-level labels in addition to the
#  required labels.
#
#  More than one match string can be provided by using semicolons to
#  separate the strings (e.g., example.org;example.com). When multiple
#  strings are specified, a match with any one of the values is considered
#  a sufficient match for the certificate, i.e., the conditions are ORed
#  together.
#
#  For example, domain_suffix_match=example.com would match
#  test.example.com but would not match test-example.com.
# domain_match: Constraint for server domain name
#  If set, this FQDN is used as a full match requirement for the
#  server certificate in SubjectAltName dNSName element(s). If a
#  matching dNSName is found, this constraint is met. If no dNSName
#  values are present, this constraint is matched against SubjectName CN
#  using same full match comparison. This behavior is similar to
#  domain_suffix_match, but has the requirement of a full match, i.e.,
#  no subdomains or wildcard matches are allowed. Case-insensitive
#  comparison is used, so "Example.com" matches "example.com", but would
#  not match "test.Example.com".
#
#  More than one match string can be provided by using semicolons to
#  separate the strings (e.g., example.org;example.com). When multiple
#  strings are specified, a match with any one of the values is considered
#  a sufficient match for the certificate, i.e., the conditions are ORed
#  together.
# phase1: Phase1 (outer authentication, i.e., TLS tunnel) parameters
#  (string with field-value pairs, e.g., "peapver=0" or
#  "peapver=1 peaplabel=1")
#  'peapver' can be used to force which PEAP version (0 or 1) is used.
#  'peaplabel=1' can be used to force new label, "client PEAP encryption",
#  to be used during key derivation when PEAPv1 or newer. Most existing
#  PEAPv1 implementation seem to be using the old label, "client EAP
#  encryption", and wpa_supplicant is now using that as the default value.
#  Some servers, e.g., Radiator, may require peaplabel=1 configuration to
#  interoperate with PEAPv1; see eap_testing.txt for more details.
#  'peap_outer_success=0' can be used to terminate PEAP authentication on
#  tunneled EAP-Success. This is required with some RADIUS servers that
#  implement draft-josefsson-pppext-eap-tls-eap-05.txt (e.g.,
#  Lucent NavisRadius v4.4.0 with PEAP in "IETF Draft 5" mode)
#  include_tls_length=1 can be used to force wpa_supplicant to include
#  TLS Message Length field in all TLS messages even if they are not
#  fragmented.
#  sim_min_num_chal=3 can be used to configure EAP-SIM to require three
#  challenges (by default, it accepts 2 or 3)
#  result_ind=1 can be used to enable EAP-SIM and EAP-AKA to use
#  protected result indication.
#  'crypto_binding' option can be used to control PEAPv0 cryptobinding
#  behavior:
#   * 0 = do not use cryptobinding (default)
#   * 1 = use cryptobinding if server supports it
#   * 2 = require cryptobinding
#  EAP-WSC (WPS) uses following options: pin=<Device Password> or
#  pbc=1.
#
#  For wired IEEE 802.1X authentication, "allow_canned_success=1" can be
#  used to configure a mode that allows EAP-Success (and EAP-Failure)
#  without going through authentication step. Some switches use such
#  sequence when forcing the port to be authorized/unauthorized or as a
#  fallback option if the authentication server is unreachable. By default,
#  wpa_supplicant discards such frames to protect against potential attacks
#  by rogue devices, but this option can be used to disable that protection
#  for cases where the server/authenticator does not need to be
#  authenticated.
# phase2: Phase2 (inner authentication with TLS tunnel) parameters
#  (string with field-value pairs, e.g., "auth=MSCHAPV2" for EAP-PEAP or
#  "autheap=MSCHAPV2 autheap=MD5" for EAP-TTLS). "mschapv2_retry=0" can be
#  used to disable MSCHAPv2 password retry in authentication failure cases.
#
# TLS-based methods can use the following parameters to control TLS behavior
# (these are normally in the phase1 parameter, but can be used also in the
# phase2 parameter when EAP-TLS is used within the inner tunnel):
# tls_allow_md5=1 - allow MD5-based certificate signatures (depending on the
#  TLS library, these may be disabled by default to enforce stronger
#  security)
# tls_disable_time_checks=1 - ignore certificate validity time (this requests
#  the TLS library to accept certificates even if they are not currently
#  valid, i.e., have expired or have not yet become valid; this should be
#  used only for testing purposes)
# tls_disable_session_ticket=1 - disable TLS Session Ticket extension
# tls_disable_session_ticket=0 - allow TLS Session Ticket extension to be used
#  Note: If not set, this is automatically set to 1 for EAP-TLS/PEAP/TTLS
#  as a workaround for broken authentication server implementations unless
#  EAP workarounds are disabled with eap_workaround=0.
#  For EAP-FAST, this must be set to 0 (or left unconfigured for the
#  default value to be used automatically).
# tls_disable_tlsv1_0=1 - disable use of TLSv1.0
# tls_disable_tlsv1_0=0 - explicitly enable use of TLSv1.0 (this allows
#  systemwide TLS policies to be overridden)
# tls_disable_tlsv1_1=1 - disable use of TLSv1.1 (a workaround for AAA servers
#  that have issues interoperating with updated TLS version)
# tls_disable_tlsv1_1=0 - explicitly enable use of TLSv1.1 (this allows
#  systemwide TLS policies to be overridden)
# tls_disable_tlsv1_2=1 - disable use of TLSv1.2 (a workaround for AAA servers
#  that have issues interoperating with updated TLS version)
# tls_disable_tlsv1_2=0 - explicitly enable use of TLSv1.2 (this allows
#  systemwide TLS policies to be overridden)
# tls_disable_tlsv1_3=1 - disable use of TLSv1.3 (a workaround for AAA servers
#  that have issues interoperating with updated TLS version)
# tls_disable_tlsv1_3=0 - enable TLSv1.3 (experimental - disabled by default)
# tls_ext_cert_check=0 - No external server certificate validation (default)
# tls_ext_cert_check=1 - External server certificate validation enabled; this
#  requires an external program doing validation of server certificate
#  chain when receiving CTRL-RSP-EXT_CERT_CHECK event from the control
#  interface and report the result of the validation with
#  CTRL-RSP_EXT_CERT_CHECK.
# tls_suiteb=0 - do not apply Suite B 192-bit constraints on TLS (default)
# tls_suiteb=1 - apply Suite B 192-bit constraints on TLS; this is used in
#  particular when using Suite B with RSA keys of >= 3K (3072) bits
#
# Following certificate/private key fields are used in inner Phase2
# authentication when using EAP-TTLS or EAP-PEAP.
# ca_cert2: File path to CA certificate file. This file can have one or more
#  trusted CA certificates. If ca_cert2 and ca_path2 are not included,
#  server certificate will not be verified. This is insecure and a trusted
#  CA certificate should always be configured.
# ca_path2: Directory path for CA certificate files (PEM)
# client_cert2: File path to client certificate file
# private_key2: File path to client private key file
# private_key2_passwd: Password for private key file
# dh_file2: File path to DH/DSA parameters file (in PEM format)
# subject_match2: Substring to be matched against the subject of the
#  authentication server certificate. See subject_match for more details.
# altsubject_match2: Semicolon separated string of entries to be matched
#  against the alternative subject name of the authentication server
#  certificate. See altsubject_match documentation for more details.
# domain_suffix_match2: Constraint for server domain name. See
#  domain_suffix_match for more details.
# ocsp2: See ocsp for more details.
#
# Separate machine credentials can be configured for EAP-TEAP Phase 2 with
# "machine_" prefix (e.g., "machine_identity") in the configuration parameters.
# See the parameters without that prefix for more details on the meaning and
# format of each such parameter.
#
# openssl_ciphers: OpenSSL specific cipher configuration
#  This can be used to override the global openssl_ciphers configuration
#  parameter (see above).
#
# Whether beacon protection is enabled
# This depends on management frame protection (ieee80211w) being enabled and
# beacon protection support indication from the driver.
# 0 = disabled (default)
# 1 = enabled
#beacon_prot=0

# Transition Disable indication
# The AP can notify authenticated stations to disable transition mode
# in their network profiles when the network has completed transition
# steps, i.e., once sufficiently large number of APs in the ESS have
# been updated to support the more secure alternative. When this
# indication is used, the stations are expected to automatically
# disable transition mode and less secure security options. This
# includes use of WEP, TKIP (including use of TKIP as the group
# cipher), and connections without PMF.
# Bitmap bits:
# bit 0 (0x01): WPA3-Personal (i.e., disable WPA2-Personal = WPA-PSK
#  and only allow SAE to be used)
# bit 1 (0x02): SAE-PK (disable SAE without use of SAE-PK)
# bit 2 (0x04): WPA3-Enterprise (move to requiring PMF)
# bit 3 (0x08): Enhanced Open (disable use of open network; require
#  OWE)


# Example blocks:
network={
  ssid="Hostapd-AP-E"
  key_mgmt=WPA-EAP
  ieee80211w=0
  auth_alg=OPEN
  pairwise=CCMP
  group=CCMP
  group_mgmt=AES-128-CMAC
  eap=TTLS
  ca_path="Freeradius/Conf/E_wpa2/certs/ca.pem"
  #subject_match="/C=FR/ST=New World/L=Laugh Tale/CN=radius.strawhat.com/emailAddress=radius@strawhat.com"
  phase2="autheap=MSCHAPV2"
  identity="bob@example.org"
  anonymous_identity="anonymous"
  password="argoargoargo"
}

